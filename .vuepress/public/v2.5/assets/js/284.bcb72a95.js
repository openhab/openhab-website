(window.webpackJsonp=window.webpackJsonp||[]).push([[284],{866:function(e,t,i){"use strict";i.r(t);var n=i(0),s=Object(n.a)({},function(){var e=this,t=e.$createElement,i=e._self._c||t;return i("div",{staticClass:"content"},[e._m(0),e._v(" "),i("AddonLogo"),e._v(" "),e._m(1),e._v(" "),i("p",[e._v("MQTT is a server/client architecture.")]),e._v(" "),i("p",[e._v("A server, also called broker is not provided within this binding.\nYou can use any of the freely available MQTT Brokers like "),i("a",{attrs:{href:"https://mosquitto.org/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Mosquitto"),i("OutboundLink")],1),e._v("\nor "),i("a",{attrs:{href:"https://moquette-io.github.io/moquette/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Moquette"),i("OutboundLink")],1),e._v(" or install the "),i("a",{attrs:{href:"https://www.openhab.org/addons/integrations/mqttembeddedbroker/",target:"_blank",rel:"noopener noreferrer"}},[e._v("included Moquette broker"),i("OutboundLink")],1),e._v(" as add-on.")]),e._v(" "),i("p",[e._v("This particular binding allows to configure connections to brokers via openHAB Things.\nThis binding does NOT allow you to link Channels to MQTT topics or perform auto-discovery of available\nMQTT topics. Please check out the available extensions:")]),e._v(" "),i("ul",[i("li",[i("router-link",{attrs:{to:"./../mqtt.generic/"}},[e._v("MQTT Things and Channels Binding")])],1),e._v(" "),i("li",[i("router-link",{attrs:{to:"./../mqtt.homeassistant/"}},[e._v("HomeAssistant MQTT Components Binding")])],1),e._v(" "),i("li",[i("router-link",{attrs:{to:"./../mqtt.homie/"}},[e._v("MQTT Homie Binding")])],1)]),e._v(" "),e._m(2),e._v(" "),e._m(3),e._v(" "),e._m(4),e._v(" "),i("p",[e._v("Required configuration parameters are:")]),e._v(" "),e._m(5),e._v(" "),i("p",[e._v("Additionally the following parameters can be set:")]),e._v(" "),e._m(6),e._v(" "),i("p",[e._v("Reconnect parameters are:")]),e._v(" "),e._m(7),e._v(" "),i("p",[e._v("An MQTT last will and testament can be configured:")]),e._v(" "),e._m(8),e._v(" "),i("p",[e._v("For more security, the following optional parameters can be altered:")]),e._v(" "),e._m(9),e._v(" "),e._m(10),e._v(" "),i("p",[e._v("You can extend your broker connection bridges with a channel:")]),e._v(" "),e._m(11),e._v(" "),i("p",[e._v("Configuration parameters are:")]),e._v(" "),e._m(12),e._v(" "),i("DocPreviousVersions"),e._v(" "),i("EditPageLink")],1)},[function(){var e=this.$createElement,t=this._self._c||e;return t("h1",{attrs:{id:"mqtt-binding"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#mqtt-binding","aria-hidden":"true"}},[this._v("#")]),this._v(" MQTT Binding")])},function(){var e=this.$createElement,t=this._self._c||e;return t("blockquote",[t("p",[this._v('MQTT is a machine-to-machine (M2M)/"Internet of Things" connectivity protocol.\nIt was designed as an extremely lightweight publish/subscribe messaging transport.')])])},function(){var e=this.$createElement,t=this._self._c||e;return t("h2",{attrs:{id:"supported-bridges"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#supported-bridges","aria-hidden":"true"}},[this._v("#")]),this._v(" Supported Bridges")])},function(){var e=this.$createElement,t=this._self._c||e;return t("ul",[t("li",[this._v("Broker: This bridge represents an MQTT Broker connection, configured and managed by this binding.")]),this._v(" "),t("li",[this._v("SystemBroker: A system configured broker cannot be changed by this binding and will be listed as read-only system-broker.")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("h2",{attrs:{id:"bridge-configuration"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#bridge-configuration","aria-hidden":"true"}},[this._v("#")]),this._v(" Bridge Configuration")])},function(){var e=this,t=e.$createElement,i=e._self._c||t;return i("ul",[i("li",[i("strong",[e._v("host")]),e._v(": The IP/Hostname of the MQTT broker. Be aware that this binding allows only one bridge / one connection per unique host:port.")]),e._v(" "),i("li",[i("strong",[e._v("port")]),e._v(": The optional port of the MQTT broker. If none is provided, the typical ports 1883 and 8883 (SSL) are used. Be aware that this binding allows only one bridge / one connection per unique host:port.")]),e._v(" "),i("li",[i("strong",[e._v("secure")]),e._v(": Uses TLS/SSL to establish a secure connection to the broker. Can be true or false. Defaults to false.")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("ul",[t("li",[t("strong",[this._v("qos")]),this._v(": Quality of Service. Can be 0, 1 or 2. Please read the MQTT specification for details. Defaults to 0.")]),this._v(" "),t("li",[t("strong",[this._v("clientID")]),this._v(": Use a fixed client ID. Defaults to empty which means a user ID is generated for this connection.")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("ul",[t("li",[t("strong",[this._v("reconnectTime")]),this._v(": Reconnect time in ms. If a connection is lost, the binding will wait this time before it tries to reconnect. Defaults to 60000 (60s).")]),this._v(" "),t("li",[t("strong",[this._v("keepAlive")]),this._v(": Keep alive / heartbeat timer in s. It can take up to this time to determine if a server connection is lost. A lower value may keep the broker unnecessarily busy for no or little additional value. Defaults to 60s.")])])},function(){var e=this,t=e.$createElement,i=e._self._c||t;return i("ul",[i("li",[i("strong",[e._v("lwtMessage")]),e._v(": An optional last will and testament message. Defaults to empty.")]),e._v(" "),i("li",[i("strong",[e._v("lwtTopic")]),e._v(": The last will topic. Defaults to empty and therefore disables the last will.")]),e._v(" "),i("li",[i("strong",[e._v("lwtQos")]),e._v(": The optional qos of the last will. Defaults to 0.")]),e._v(" "),i("li",[i("strong",[e._v("lwtRetain")]),e._v(": Retain last will message. Defaults to false.")])])},function(){var e=this,t=e.$createElement,i=e._self._c||t;return i("ul",[i("li",[i("strong",[e._v("username")]),e._v(": The MQTT username (since MQTT 3.1). Defaults to empty.")]),e._v(" "),i("li",[i("strong",[e._v("password")]),e._v(": The MQTT password (since MQTT 3.1). Defaults to empty.")]),e._v(" "),i("li",[i("strong",[e._v("certificatepin")]),e._v(": If this is set: After the next connection has been successfully established, the certificate is pinned. The connection will be refused if another certificate is used. Clear "),i("strong",[e._v("certificate")]),e._v(" to allow a new certificate for the next connection attempt. This option will increase security.")]),e._v(" "),i("li",[i("strong",[e._v("publickeypin")]),e._v(": If this is set: After the next connection has been successfully established, the public key of the broker is pinned. The connection will be refused if another public key is used. Clear "),i("strong",[e._v("publickey")]),e._v(" to allow a new public key for the next connection attempt. This option will increase security.")]),e._v(" "),i("li",[i("strong",[e._v("certificate")]),e._v(": The certificate hash. If "),i("strong",[e._v("certificatepin")]),e._v(" is set this hash is used to verify the connection. Clear to allow a new certificate pinning on the next connection attempt. If empty will be filled automatically by the next successful connection. An example input would be "),i("code",[e._v("SHA-256:83F9171E06A313118889F7D79302BD1B7A2042EE0CFD029ABF8DD06FFA6CD9D3")]),e._v(".")]),e._v(" "),i("li",[i("strong",[e._v("publickey")]),e._v(": The public key hash. If "),i("strong",[e._v("publickeypin")]),e._v(" is set this hash is used to verify the connection. Clear to allow a new public key pinning on the next connection attempt. If empty will be filled automatically by the next successful connection. An example input would be "),i("code",[e._v("SHA-256:83F9171E06A313118889F7D79302BD1B7A2042EE0CFD029ABF8DD06FFA6CD9D3")]),e._v(".")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("h2",{attrs:{id:"supported-channels"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#supported-channels","aria-hidden":"true"}},[this._v("#")]),this._v(" Supported Channels")])},function(){var e=this.$createElement,t=this._self._c||e;return t("ul",[t("li",[t("strong",[this._v("publishTrigger")]),this._v(": This channel is triggered when a value is published to the configured MQTT topic on this broker connection. The event payload (in "),t("code",[this._v("receivedEvent")]),this._v(") will be the received MQTT topic and its value, separated by the hash character ("),t("code",[this._v("#")]),this._v(").")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("ul",[t("li",[t("strong",[this._v("stateTopic")]),this._v(': This channel will trigger on this MQTT topic. This topic can contain wildcards like + and # for example "all/in/#" or "sensors/+/config".')]),this._v(" "),t("li",[t("strong",[this._v("payload")]),this._v(": An optional condition on the value of the MQTT topic that must match before this channel is triggered.")])])}],!1,null,null,null);t.default=s.exports}}]);