(window.webpackJsonp=window.webpackJsonp||[]).push([[279],{857:function(t,e,s){"use strict";s.r(e);var a=s(0),n=Object(a.a)({},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("div",{staticClass:"content"},[t._m(0),t._v(" "),s("AddonLogo"),t._v(" "),s("p",[t._v("This is the binding to access Modbus TCP and serial slaves. RTU, ASCII and BIN variants of Serial Modbus are supported.\nModbus TCP slaves are usually also called as Modbus TCP servers.")]),t._v(" "),s("p",[t._v("The binding can act as")]),t._v(" "),t._m(1),t._v(" "),s("p",[t._v("The Modbus binding polls the slave data with an configurable poll period.\nopenHAB commands are translated to write requests.")]),t._v(" "),t._m(2),t._v(" "),t._m(3),t._v(" "),t._m(4),t._v(" "),t._m(5),t._v(" "),s("p",[t._v("Please note the following caveats or limitations")]),t._v(" "),t._m(6),t._v(" "),t._m(7),t._v(" "),s("p",[t._v("Reader of the documentation should understand the basics of Modbus protocol.\nGood sources for further information:")]),t._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"https://en.wikipedia.org/wiki/Modbus",target:"_blank",rel:"noopener noreferrer"}},[t._v("Wikipedia article"),s("OutboundLink")],1),t._v(": good read on modbus basics and addressing.")]),t._v(" "),s("li",[s("a",{attrs:{href:"https://www.simplymodbus.ca/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Simplymodbus.ca"),s("OutboundLink")],1),t._v(": good reference as well as excellent tutorial like explanation of the protocol")])]),t._v(" "),s("p",[t._v("Useful tools")]),t._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"https://www.binaryconvert.com/",target:"_blank",rel:"noopener noreferrer"}},[t._v("binaryconvert.com"),s("OutboundLink")],1),t._v(": tool to convert numbers between different binary presentations")]),t._v(" "),s("li",[s("a",{attrs:{href:"https://modbus.rapidscada.net/",target:"_blank",rel:"noopener noreferrer"}},[t._v("rapidscada.net Modbus parser"),s("OutboundLink")],1),t._v(": tool to parse Modbus requests and responses. Useful for debugging purposes when you want to understand the message sent / received.")]),t._v(" "),s("li",[s("a",{attrs:{href:"https://jsfiddle.net/rgypuuxq/",target:"_blank",rel:"noopener noreferrer"}},[t._v("JSFiddle tool"),s("OutboundLink")],1),t._v(" to test JavaScript (JS) transformations interactively")])]),t._v(" "),t._m(8),t._v(" "),s("p",[t._v("This binding supports 4 different things types")]),t._v(" "),t._m(9),t._v(" "),t._m(10),t._v(" "),t._m(11),t._v(" "),s("p",[t._v("Other than the things themselves, there is no binding configuration.")]),t._v(" "),t._m(12),t._v(" "),s("p",[t._v("With serial Modbus slaves, configuration of the serial port in openHAB is important.\nOtherwise you might encounter errors preventing all communication.")]),t._v(" "),s("p",[t._v("See "),s("router-link",{attrs:{to:"/docs/administration/serial.html"}},[t._v("general documentation about serial port configuration")]),t._v(" to configure the serial port correctly.")],1),t._v(" "),t._m(13),t._v(" "),s("p",[t._v("In the tables below the thing configuration parameters are grouped by thing type.")]),t._v(" "),t._m(14),t._v(" "),t._m(15),t._v(" "),s("p",[t._v("Some examples:")]),t._v(" "),t._m(16),t._v(" "),s("p",[t._v("Note the differences with quoting.")]),t._v(" "),t._m(17),t._v(" "),t._m(18),t._v(" "),t._m(19),t._v(" "),s("p",[t._v("Basic parameters")]),t._v(" "),t._m(20),t._v(" "),s("p",[t._v("Advanced parameters")]),t._v(" "),t._m(21),t._v(" "),t._m(22),t._v(" "),t._m(23),t._v(" "),t._m(24),t._v(" "),t._m(25),t._v(" "),s("p",[t._v("Basic parameters")]),t._v(" "),s("table",[t._m(26),t._v(" "),s("tbody",[t._m(27),t._v(" "),s("tr",[s("td",[t._v("id")]),t._v(" "),s("td",[t._v("integer")]),t._v(" "),s("td"),t._v(" "),t._m(28),t._v(" "),s("td",[t._v("Slave id. Also known as station address or unit identifier. See "),s("a",{attrs:{href:"https://en.wikipedia.org/wiki/Modbus",target:"_blank",rel:"noopener noreferrer"}},[t._v("Wikipedia"),s("OutboundLink")],1),t._v(" and "),s("a",{attrs:{href:"https://www.simplymodbus.ca/index.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("simplymodbus"),s("OutboundLink")],1),t._v(" articles for more information")]),t._v(" "),s("td")]),t._v(" "),t._m(29),t._v(" "),t._m(30),t._v(" "),t._m(31),t._v(" "),t._m(32),t._v(" "),t._m(33),t._v(" "),t._m(34)])]),t._v(" "),s("p",[t._v("Advanced parameters")]),t._v(" "),t._m(35),t._v(" "),t._m(36),t._v(" "),t._m(37),t._v(" "),t._m(38),t._v(" "),t._m(39),t._v(" "),t._m(40),t._v(" "),t._m(41),t._v(" "),t._m(42),t._v(" "),t._m(43),t._v(" "),t._m(44),t._v(" "),t._m(45),t._v(" "),t._m(46),t._v(" "),t._m(47),t._v(" "),t._m(48),t._v(" "),t._m(49),t._v(" "),t._m(50),t._v(" "),s("p",[t._v("Furthermore, there are additional channels that are useful for diagnostics:")]),t._v(" "),t._m(51),t._v(" "),t._m(52),t._v(" "),t._m(53),t._v(" "),t._m(54),t._v(" "),t._m(55),t._m(56),t._v(" "),t._m(57),t._v(" "),t._m(58),t._v(" "),s("p",[t._v("Typically, you see something like this")]),t._v(" "),t._m(59),s("p",[t._v("Let's go through it step by step")]),t._v(" "),t._m(60),t._m(61),t._v(" "),t._m(62),t._m(63),t._v(" "),s("p",[t._v("To summarize (credits to "),s("a",{attrs:{href:"https://community.openhab.org/t/rule-to-postupdate-an-item-works-but-item-falls-back-after-some-seconds/19986/2?u=ssalonen",target:"_blank",rel:"noopener noreferrer"}},[t._v("rossko57's community post"),s("OutboundLink")],1),t._v("):")]),t._v(" "),t._m(64),t._v(" "),t._m(65),t._v(" "),t._m(66),s("p",[t._v("Main documentation on "),s("code",[t._v("autoupdate")]),t._v(" in "),s("a",{attrs:{href:"https://www.openhab.org/docs/configuration/items.html#item-definition-and-syntax",target:"_blank",rel:"noopener noreferrer"}},[t._v("Items section of openHAB docs"),s("OutboundLink")],1),t._v(".")]),t._v(" "),t._m(67),t._v(" "),t._m(68),t._v(" "),s("p",[t._v("Note that the main binding does not recognize any device, so it is pointless to turn this on unless you have the correct binding installed.")]),t._v(" "),t._m(69),t._v(" "),t._m(70),t._v(" "),s("p",[s("a",{attrs:{href:"https://en.wikipedia.org/wiki/Modbus#Coil.2C_discrete_input.2C_input_register.2C_holding_register_numbers_and_addresses",target:"_blank",rel:"noopener noreferrer"}},[t._v("Modbus Wikipedia article"),s("OutboundLink")],1),t._v(" summarizes this excellently:")]),t._v(" "),t._m(71),t._v(" "),t._m(72),t._v(" "),s("p",[t._v("Note that entity begins counting at 1, data frame address at 0.")]),t._v(" "),t._m(73),t._v(" "),t._m(74),t._v(" "),t._m(75),t._v(" "),t._m(76),t._v(" "),t._m(77),t._v(" "),t._m(78),t._v(" "),t._m(79),t._v(" "),t._m(80),t._v(" "),t._m(81),t._v(" "),t._m(82),t._v(" "),t._m(83),t._v(" "),t._m(84),t._v(" "),t._m(85),t._v(" "),t._m(86),t._v(" "),t._m(87),t._v(" "),t._m(88),t._v(" "),t._m(89),t._v(" "),t._m(90),t._v(" "),t._m(91),t._v(" "),t._m(92),t._v(" "),t._m(93),t._v(" "),t._m(94),t._v(" "),t._m(95),t._v(" "),t._m(96),t._v(" "),s("p",[t._v("The MODBUS specification defines each 16bit word to be encoded as Big Endian,\nbut there is no specification on the order of those words within 32bit or larger data types.\nThe net result is that when you have a master and slave that operate with the same Endian mode things work fine,\nbut add a device with a different Endian mode and it is very hard to correct.\nTo resolve this the binding supports a second set of valuetypes that have the words swapped.")]),t._v(" "),t._m(97),t._v(" "),t._m(98),t._v(" "),t._m(99),t._v(" "),t._m(100),t._v(" "),t._m(101),t._v(" "),t._m(102),t._v(" "),t._m(103),t._v(" "),t._m(104),t._v(" "),t._m(105),t._v(" "),t._m(106),t._v(" "),t._m(107),t._v(" "),t._m(108),t._v(" "),t._m(109),t._v(" "),t._m(110),t._v(" "),t._m(111),t._v(" "),t._m(112),t._v(" "),t._m(113),t._v(" "),t._m(114),t._v(" "),t._m(115),t._v(" "),t._m(116),t._v(" "),t._m(117),t._v(" "),t._m(118),t._v(" "),t._m(119),t._v(" "),t._m(120),t._v(" "),t._m(121),t._v(" "),s("p",[t._v("There are some more advanced use cases which need more control how the command is converted to set of bits or requests.\nDue to this reason, one can return a special "),s("a",{attrs:{href:"https://en.wikipedia.org/wiki/JSON",target:"_blank",rel:"noopener noreferrer"}},[t._v("JSON"),s("OutboundLink")],1),t._v(" output from the transformation (step 3).\nThe JSON directly specifies the write requests to send to Modbus slave.\nIn this case, steps 4. and 5. are skipped.")]),t._v(" "),s("p",[t._v("For example, if the transformation returns the following JSON")]),t._v(" "),t._m(122),s("p",[t._v("Two write requests would be sent to the Modbus slave")]),t._v(" "),t._m(123),t._v(" "),t._m(124),t._v(" "),t._m(125),t._v(" "),s("p",[t._v("Explanation for the different properties of the JSON object in the array.")]),t._v(" "),t._m(126),t._v(" "),t._m(127),t._v(" "),s("p",[t._v("Transformations serve two purpose")]),t._v(" "),t._m(128),t._v(" "),t._m(129),t._v(" "),t._m(130),t._v(" "),t._m(131),t._v(" "),t._m(132),t._v(" "),s("p",[t._v("There are three different format to specify the configuration:")]),t._v(" "),t._m(133),t._v(" "),s("p",[t._v("Consult "),s("a",{attrs:{href:"https://www.openhab.org/docs/concepts/items.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("background documentation on items"),s("OutboundLink")],1),t._v(" to understand accepted data types (state) by each item.")]),t._v(" "),t._m(134),t._v(" "),t._m(135),t._v(" "),s("p",[t._v("There are three different format to specify the configuration:")]),t._v(" "),t._m(136),t._v(" "),t._m(137),t._v(" "),s("p",[t._v("Typical use case for transformations is scaling of numbers.\nThe data in Modbus slaves is quite commonly encoded as integers, and thus scaling is necessary to convert them to useful float numbers.")]),t._v(" "),t._m(138),t._v(" "),t._m(139),t._m(140),t._v(" "),t._m(141),t._m(142),t._v(" "),t._m(143),t._v(" "),t._m(144),t._v(" "),t._m(145),t._m(146),t._v(" "),t._m(147),t._v(" "),t._m(148),t._v(" "),s("p",[t._v("This example reads different kind of Modbus items from the slave.")]),t._v(" "),s("p",[t._v("Please refer to the comments for more explanations.")]),t._v(" "),t._m(149),t._v(" "),t._m(150),t._m(151),t._v(" "),t._m(152),t._m(153),t._v(" "),t._m(154),t._m(155),t._v(" "),s("p",[t._v('This updates the item from discrete input index 4, and writes commands to coil 5.\nThis can be useful when the discrete input is the measurement (e.g. "is valve open?"), and the command is the control (e.g. "open/close valve").')]),t._v(" "),s("p",[t._v("The sitemap shows the current coil status.\nIt also has switches to set/reset coil status, for debugging purposes.\nToggling these switches always have the same effect: either setting or resetting the bit.")]),t._v(" "),t._m(156),t._v(" "),t._m(157),t._m(158),t._v(" "),t._m(159),t._m(160),t._v(" "),t._m(161),t._m(162),t._v(" "),s("p",[t._v("This example divides value on read, and multiplies them on write, using JS transforms.")]),t._v(" "),t._m(163),t._v(" "),t._m(164),t._m(165),t._v(" "),t._m(166),t._m(167),t._v(" "),t._m(168),t._m(169),t._v(" "),t._m(170),t._v(" "),s("p",[t._v("Dimmer type Items are not a straightforward match to Modbus registers, as they feature a numeric value which is limited to 0-100 Percent, as well as handling ON/OFF commands.")]),t._v(" "),s("p",[t._v("Transforms can be used to match and scale both reading and writing.")]),t._v(" "),s("p",[t._v("Example for a dimmer device where 255 register value = 100% for fully ON:")]),t._v(" "),t._m(171),t._v(" "),t._m(172),t._m(173),t._v(" "),t._m(174),t._m(175),t._v(" "),t._m(176),t._m(177),t._v(" "),t._m(178),t._m(179),t._v(" "),t._m(180),t._m(181),t._v(" "),t._m(182),t._v(" "),s("p",[t._v("This is an example how different Rollershutter commands can be written to Modbus.")]),t._v(" "),t._m(183),t._v(" "),s("p",[t._v("The logic of processing commands are summarized in the table")]),t._v(" "),t._m(184),t._v(" "),t._m(185),t._v(" "),t._m(186),t._m(187),t._v(" "),t._m(188),t._m(189),t._v(" "),t._m(190),t._m(191),t._v(" "),t._m(192),t._m(193),t._v(" "),s("p",[t._v("In many cases fast enough poll interval is pretty long, e.g. 1 second.\nThis is problematic in cases when faster updates are wanted based on events in openHAB.")]),t._v(" "),s("p",[t._v("For example, in some cases it is useful to update faster when a command is sent to some specific items.")]),t._v(" "),s("p",[t._v("Simple solution is just increase the poll period with the associated performance penalties and possible burden to the slave device.")]),t._v(" "),t._m(194),t._v(" "),t._m(195),t._v(" "),t._m(196),t._m(197),t._v(" "),t._m(198),t._v(" "),s("p",[t._v("The openHAB 1 Modbus binding is quite different from the openHAB 2 binding.\nThe biggest difference is that the openHAB 2 binding uses things which can be configured using Paper UI.")]),t._v(" "),s("p",[t._v("Unfortunately there is no conversion tool to convert old configurations to new thing structure.")]),t._v(" "),s("p",[t._v("Due to the introduction of things, the configuration was bound to be backwards incompatible.\nThis offered opportunity to simplify some aspects of configuration.\nThe major differences are configuration logic are:")]),t._v(" "),t._m(199),t._v(" "),s("p",[t._v("The new Modbus binding uses "),s("em",[t._v("absolute")]),t._v(" addresses.\nThis means that all parameters referring to addresses of input registers, holding registers, discrete inputs or coils are "),s("em",[t._v("entity addresses")]),t._v(".\nThis means that the addresses start from zero (first entity), and can go up to 65 535. See "),s("a",{attrs:{href:"https://en.wikipedia.org/wiki/Modbus#Coil.2C_discrete_input.2C_input_register.2C_holding_register_numbers_and_addresses",target:"_blank",rel:"noopener noreferrer"}},[t._v("Wikipedia explanation"),s("OutboundLink")],1),t._v(" for more information.")]),t._v(" "),t._m(200),t._v(" "),t._m(201),t._v(" "),t._m(202),t._v(" "),t._m(203),t._v(" "),s("p",[t._v('It is still not possible to read 32 bit value type starting "middle" of register.\nHowever, if such need arises the addressing syntax is extensible to covert these cases.')]),t._v(" "),t._m(204),t._v(" "),t._m(205),t._v(" "),s("p",[t._v("The new binding polls data in parallel which means that errors with one slave do not necessarily slow down polling with some other slave.")]),t._v(" "),t._m(206),t._v(" "),t._m(207),t._v(" "),t._m(208),t._v(" "),t._m(209),t._v(" "),t._m(210),t._v(" "),t._m(211),t._v(" "),s("p",[t._v("The new binding supports 32 and 64 bit values types when writing.")]),t._v(" "),t._m(212),t._v(" "),s("p",[t._v("Here is a step by step example for a migration from a 1.x configuration to an equivalent 2.x configuration.\nIt does not cover all features the 1.x configuration offers, but it should serve as an example on how to get it done.\nPlease note that although you can do all this stuff also using PaperUI, the file based approach is strongly recommended if you need to migrate more than only a handful of Items.")]),t._v(" "),s("p",[t._v("The 1.x modbus configuration to be updated defined 4 slaves:")]),t._v(" "),t._m(213),t._v(" "),t._m(214),t._m(215),t._v(" "),t._m(216),t._v(" "),t._m(217),s("p",[t._v("Host and Port are taken from the 1.x modbus config.")]),t._v(" "),t._m(218),t._v(" "),t._m(219),s("p",[t._v("Address, length and type can be directly taken over from the 1.x config.")]),t._v(" "),t._m(220),t._v(" "),s("p",[t._v("Here a few examples of the Item configuration from the 1.x binding:")]),t._v(" "),t._m(221),t._v(" "),t._m(222),t._m(223),t._v(" "),t._m(224),t._v(" "),t._m(225),t._m(226),t._v(" "),t._m(227),s("p",[t._v("This leads to the thing definition")]),t._v(" "),t._m(228),t._m(229),t._v(" "),s("p",[t._v("Incorporating this definitions into the thing file leads to:")]),t._v(" "),t._m(230),t._v(" "),t._m(231),t._m(232),t._v(" "),t._m(233),t._v(" "),t._m(234),s("p",[t._v("turn into")]),t._v(" "),t._m(235),s("p",[t._v("If you have many Items to change and used the naming scheme recommended above, you can now use the following search-and-replace expressions in your editor:")]),t._v(" "),s("p",[t._v("Replace")]),t._v(" "),t._m(236),t._v(" "),s("p",[t._v("by")]),t._v(" "),t._m(237),t._v(" "),t._m(238),t._v(" "),s("p",[t._v("Replace")]),t._v(" "),t._m(239),t._v(" "),s("p",[t._v("by")]),t._v(" "),t._m(240),t._v(" "),s("p",[t._v("in all lines dealing with switches.\nFor other Item types use the respective replace strings.")]),t._v(" "),s("p",[t._v("That way you can update even a large amount of Item definitions in only a few steps.")]),t._v(" "),t._m(241),t._v(" "),t._m(242),t._v(" "),s("p",[t._v("Save your updated item file and check whether updates come in as expected.")]),t._v(" "),t._m(243),t._v(" "),t._m(244),t._v(" "),s("p",[t._v("Check thing status for errors in configuration or communication.")]),t._v(" "),t._m(245),t._v(" "),t._m(246),t._v(" "),t._m(247),t._v(" "),s("p",[t._v("Consult "),s("a",{attrs:{href:"https://www.openhab.org/docs/administration/logging.html#defining-what-to-log",target:"_blank",rel:"noopener noreferrer"}},[t._v("openHAB logging documentation"),s("OutboundLink")],1),t._v(" for more information.")]),t._v(" "),t._m(248),t._v(" "),s("p",[t._v("This binding can be extended in many ways.\nIf you have a Modbus enabled device that you want to support in openHAB please read the "),s("router-link",{attrs:{to:"./DEVELOPERS.html"}},[t._v("developer section")]),t._v(".")],1),t._v(" "),s("DocPreviousVersions"),t._v(" "),s("EditPageLink")],1)},[function(){var t=this.$createElement,e=this._self._c||t;return e("h1",{attrs:{id:"modbus-binding"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#modbus-binding","aria-hidden":"true"}},[this._v("#")]),this._v(" Modbus Binding")])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[this._v("Modbus TCP Client (that is, as modbus master), querying data from Modbus TCP servers (that is, modbus slaves)")]),this._v(" "),e("li",[this._v("Modbus serial master, querying data from modbus serial slaves")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"main-features"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#main-features","aria-hidden":"true"}},[this._v("#")]),this._v(" Main Features")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("The binding polls (or "),e("em",[this._v("reads")]),this._v(") Modbus data using function codes (FC) FC01 (Read coils), FC02 (Read discrete inputs), FC03 (Read multiple holding registers) or FC04 (Read input registers).\nThis polled data is converted to data suitable for use in openHAB.\nFunctionality exists to interpret typical number formats (e.g. single precision float).")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("The binding can also "),e("em",[this._v("write")]),this._v(" data to Modbus slaves using FC05 (Write single coil), FC06 (Write single holding register), FC15 (Write multiple coils) or FC16 (Write multiple holding registers).")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"caveats-and-limitations"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#caveats-and-limitations","aria-hidden":"true"}},[this._v("#")]),this._v(" Caveats And Limitations")])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[this._v("the binding does "),e("em",[this._v("not")]),this._v(" act as Modbus slave (e.g. as Modbus TCP server).")]),this._v(" "),e("li",[this._v("the binding does "),e("em",[this._v("not")]),this._v(' support Modbus RTU over Modbus TCP, also known as "Modbus over TCP/IP" or "Modbus over TCP" or "Modbus RTU/IP", although normal "Modbus TCP" is supported. However, there is a workaround: you can use a Virtual Serial Port Server, to emulate a COM Port and Bind it with openHAB using Modbus Serial.')])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"background-material"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#background-material","aria-hidden":"true"}},[this._v("#")]),this._v(" Background Material")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"supported-things"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#supported-things","aria-hidden":"true"}},[this._v("#")]),this._v(" Supported Things")])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("table",[s("thead",[s("tr",[s("th",[t._v("Thing")]),t._v(" "),s("th",[t._v("Type")]),t._v(" "),s("th",[t._v("Description")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[s("code",[t._v("tcp")])]),t._v(" "),s("td",[t._v("Bridge")]),t._v(" "),s("td",[t._v("Modbus TCP server (Modbus TCP slave)")])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("serial")])]),t._v(" "),s("td",[t._v("Bridge")]),t._v(" "),s("td",[t._v("Modbus serial slave")])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("poller")])]),t._v(" "),s("td",[t._v("Bridge")]),t._v(" "),s("td",[t._v("Thing taking care of polling the data from modbus slaves. One poller corresponds to single Modbus read request (FC01, FC02, FC03, or FC04). Is child of "),s("code",[t._v("tcp")]),t._v(" or "),s("code",[t._v("serial")]),t._v(".")])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("data")])]),t._v(" "),s("td",[t._v("Thing")]),t._v(" "),s("td",[t._v("thing for converting polled data to meaningful numbers. Analogously, is responsible of converting openHAB commands to Modbus write requests. Is child of "),s("code",[t._v("poller")]),t._v(" (read-only or read-write things) or "),s("code",[t._v("tcp")]),t._v("/"),s("code",[t._v("serial")]),t._v(" (write-only things).")])])])])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("p",[t._v("Typically one defines either "),s("code",[t._v("tcp")]),t._v(" or "),s("code",[t._v("serial")]),t._v(" bridge, depending on the variant of Modbus slave.\nFor each Modbus read request, a "),s("code",[t._v("poller")]),t._v(" is defined.\nFinally, one ore more "),s("code",[t._v("data")]),t._v(" things are introduced to extract relevant numbers from the raw Modbus data.\nFor write-only communication, "),s("code",[t._v("data")]),t._v(" things can be introduced directly as children of "),s("code",[t._v("tcp")]),t._v(" or "),s("code",[t._v("serial")]),t._v(" bridges.")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"binding-configuration"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#binding-configuration","aria-hidden":"true"}},[this._v("#")]),this._v(" Binding Configuration")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"serial-port-configuration"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#serial-port-configuration","aria-hidden":"true"}},[this._v("#")]),this._v(" Serial Port Configuration")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"thing-configuration"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#thing-configuration","aria-hidden":"true"}},[this._v("#")]),this._v(" Thing Configuration")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("Things can be configured using Paper UI, or using a "),e("code",[this._v(".things")]),this._v(" file.\nThe configuration in this documentation explains the "),e("code",[this._v(".things")]),this._v(" file, although you can find the same parameters from the Paper UI.")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("Note that parameter type is very critical when writing "),e("code",[this._v(".things")]),this._v(" file yourself, since it affects how the parameter value is encoded in the text file.")])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("ul",[s("li",[s("code",[t._v('parameter="value"')]),t._v(" for "),s("code",[t._v("text")]),t._v(" parameters")]),t._v(" "),s("li",[s("code",[t._v("parameter=4")]),t._v(" for "),s("code",[t._v("integer")])]),t._v(" "),s("li",[s("code",[t._v("parameter=true")]),t._v(" for "),s("code",[t._v("boolean")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("Required parameters "),e("em",[this._v("must")]),this._v(" be specified in the "),e("code",[this._v(".things")]),this._v(" file.\nWhen optional parameters are not specified, they default to the values shown in the table below.")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"tcp-thing"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#tcp-thing","aria-hidden":"true"}},[this._v("#")]),this._v(" "),e("code",[this._v("tcp")]),this._v(" Thing")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("code",[this._v("tcp")]),this._v(" is representing a particular Modbus TCP server (slave).")])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("table",[s("thead",[s("tr",[s("th",[t._v("Parameter")]),t._v(" "),s("th",[t._v("Type")]),t._v(" "),s("th",[t._v("Required")]),t._v(" "),s("th",[t._v("Default if omitted")]),t._v(" "),s("th",[t._v("Description")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[s("code",[t._v("host")])]),t._v(" "),s("td",[t._v("text")]),t._v(" "),s("td"),t._v(" "),s("td",[s("code",[t._v('"localhost"')])]),t._v(" "),s("td",[t._v("IP Address or hostname")])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("port")])]),t._v(" "),s("td",[t._v("integer")]),t._v(" "),s("td"),t._v(" "),s("td",[s("code",[t._v("502")])]),t._v(" "),s("td",[t._v("Port number")])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("id")])]),t._v(" "),s("td",[t._v("integer")]),t._v(" "),s("td"),t._v(" "),s("td",[s("code",[t._v("1")])]),t._v(" "),s("td",[t._v("Slave id. Also known as station address or unit identifier.")])])])])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("table",[s("thead",[s("tr",[s("th",[t._v("Parameter")]),t._v(" "),s("th",[t._v("Required")]),t._v(" "),s("th",[t._v("Type")]),t._v(" "),s("th",[t._v("Default if omitted")]),t._v(" "),s("th",[t._v("Description")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[s("code",[t._v("timeBetweenTransactionsMillis")])]),t._v(" "),s("td"),t._v(" "),s("td",[t._v("integer")]),t._v(" "),s("td",[s("code",[t._v("60")])]),t._v(" "),s("td",[t._v("How long to delay we must have at minimum between two consecutive MODBUS transactions. In milliseconds.")])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("timeBetweenReconnectMillis")])]),t._v(" "),s("td"),t._v(" "),s("td",[t._v("integer")]),t._v(" "),s("td",[s("code",[t._v("0")])]),t._v(" "),s("td",[t._v("How long to wait to before trying to establish a new connection after the previous one has been disconnected. In milliseconds.")])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("connectMaxTries")])]),t._v(" "),s("td"),t._v(" "),s("td",[t._v("integer")]),t._v(" "),s("td",[s("code",[t._v("1")])]),t._v(" "),s("td",[t._v("How many times we try to establish the connection. Should be at least 1.")])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("reconnectAfterMillis")])]),t._v(" "),s("td"),t._v(" "),s("td",[t._v("integer")]),t._v(" "),s("td",[s("code",[t._v("0")])]),t._v(" "),s("td",[t._v("The connection is kept open at least the time specified here. Value of zero means that connection is disconnected after every MODBUS transaction. In milliseconds.")])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("connectTimeoutMillis")])]),t._v(" "),s("td"),t._v(" "),s("td",[t._v("integer")]),t._v(" "),s("td",[s("code",[t._v("10000")])]),t._v(" "),s("td",[t._v("The maximum time that is waited when establishing the connection. Value of zero means that system/OS default is respected. In milliseconds.")])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("enableDiscovery")])]),t._v(" "),s("td"),t._v(" "),s("td",[t._v("boolean")]),t._v(" "),s("td",[t._v("false")]),t._v(" "),s("td",[t._v("Enable auto-discovery feature. Effective only if a supporting extension has been installed.")])])])])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("p",[s("strong",[t._v("Note:")]),t._v(" Advanced parameters must be equal for all "),s("code",[t._v("tcp")]),t._v(" things sharing the same "),s("code",[t._v("host")]),t._v(" and "),s("code",[t._v("port")]),t._v(".")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("The advanced parameters have conservative defaults, meaning that they should work for most users.\nIn some cases when extreme performance is required (e.g. poll period below 10 ms), one might want to decrease the delay parameters, especially "),e("code",[this._v("timeBetweenTransactionsMillis")]),this._v(".\nSimilarly, with some slower devices on might need to increase the values.")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"serial-thing"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#serial-thing","aria-hidden":"true"}},[this._v("#")]),this._v(" "),e("code",[this._v("serial")]),this._v(" Thing")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("code",[this._v("serial")]),this._v(" is representing a particular Modbus serial slave.")])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("thead",[s("tr",[s("th",[t._v("Parameter")]),t._v(" "),s("th",[t._v("Type")]),t._v(" "),s("th",[t._v("Required")]),t._v(" "),s("th",[t._v("Default if omitted")]),t._v(" "),s("th",[t._v("Description")]),t._v(" "),s("th")])])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("tr",[s("td",[t._v("port")]),t._v(" "),s("td",[t._v("text")]),t._v(" "),s("td",[t._v("✓")]),t._v(" "),s("td"),t._v(" "),s("td",[t._v("Serial port to use, for example "),s("code",[t._v('"/dev/ttyS0"')]),t._v(" or "),s("code",[t._v('"COM1"')])]),t._v(" "),s("td")])},function(){var t=this.$createElement,e=this._self._c||t;return e("td",[e("code",[this._v("1")])])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("tr",[s("td",[t._v("baud")]),t._v(" "),s("td",[t._v("integer")]),t._v(" "),s("td",[t._v("✓")]),t._v(" "),s("td"),t._v(" "),s("td",[t._v("Baud of the connection. Valid values are: "),s("code",[t._v("75")]),t._v(", "),s("code",[t._v("110")]),t._v(", "),s("code",[t._v("300")]),t._v(", "),s("code",[t._v("1200")]),t._v(", "),s("code",[t._v("2400")]),t._v(", "),s("code",[t._v("4800")]),t._v(", "),s("code",[t._v("9600")]),t._v(", "),s("code",[t._v("19200")]),t._v(", "),s("code",[t._v("38400")]),t._v(", "),s("code",[t._v("57600")]),t._v(", "),s("code",[t._v("115200")]),t._v(".")]),t._v(" "),s("td")])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("tr",[s("td",[t._v("stopBits")]),t._v(" "),s("td",[t._v("text")]),t._v(" "),s("td",[t._v("✓")]),t._v(" "),s("td"),t._v(" "),s("td",[t._v("Stop bits. Valid values are: "),s("code",[t._v('"1.0"')]),t._v(", "),s("code",[t._v('"1.5"')]),t._v(", "),s("code",[t._v('"2.0"')]),t._v(".")]),t._v(" "),s("td")])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("tr",[s("td",[t._v("parity")]),t._v(" "),s("td",[t._v("text")]),t._v(" "),s("td",[t._v("✓")]),t._v(" "),s("td"),t._v(" "),s("td",[t._v("Parity. Valid values are: "),s("code",[t._v('"none"')]),t._v(", "),s("code",[t._v('"even"')]),t._v(", "),s("code",[t._v('"odd"')]),t._v(".")]),t._v(" "),s("td")])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("tr",[s("td",[t._v("dataBits")]),t._v(" "),s("td",[t._v("integer")]),t._v(" "),s("td",[t._v("✓")]),t._v(" "),s("td"),t._v(" "),s("td",[t._v("Data bits. Valid values are: "),s("code",[t._v("5")]),t._v(", "),s("code",[t._v("6")]),t._v(", "),s("code",[t._v("7")]),t._v(" and "),s("code",[t._v("8")]),t._v(".")]),t._v(" "),s("td")])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("tr",[s("td",[t._v("encoding")]),t._v(" "),s("td",[t._v("text")]),t._v(" "),s("td",[t._v("✓")]),t._v(" "),s("td"),t._v(" "),s("td",[t._v("Encoding. Valid values are: "),s("code",[t._v('"ascii"')]),t._v(", "),s("code",[t._v('"rtu"')]),t._v(", "),s("code",[t._v('"bin"')]),t._v(".")]),t._v(" "),s("td")])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("tr",[s("td",[t._v("echo")]),t._v(" "),s("td",[t._v("boolean")]),t._v(" "),s("td"),t._v(" "),s("td",[s("code",[t._v("false")])]),t._v(" "),s("td",[t._v("Flag for setting the RS485 echo mode. This controls whether we should try to read back whatever we send on the line, before reading the response. Valid values are: "),s("code",[t._v("true")]),t._v(", "),s("code",[t._v("false")]),t._v(".")]),t._v(" "),s("td")])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("table",[s("thead",[s("tr",[s("th",[t._v("Parameter")]),t._v(" "),s("th",[t._v("Required")]),t._v(" "),s("th",[t._v("Type")]),t._v(" "),s("th",[t._v("Default if omitted")]),t._v(" "),s("th",[t._v("Description")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[s("code",[t._v("receiveTimeoutMillis")])]),t._v(" "),s("td"),t._v(" "),s("td",[t._v("integer")]),t._v(" "),s("td",[s("code",[t._v("1500")])]),t._v(" "),s("td",[t._v("Timeout for read operations. In milliseconds.")])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("flowControlIn")])]),t._v(" "),s("td"),t._v(" "),s("td",[t._v("text")]),t._v(" "),s("td",[s("code",[t._v('"none"')])]),t._v(" "),s("td",[t._v("Type of flow control for receiving. Valid values are: "),s("code",[t._v('"none"')]),t._v(", "),s("code",[t._v('"xon/xoff in"')]),t._v(", "),s("code",[t._v('"rts/cts in"')]),t._v(".")])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("flowControlOut")])]),t._v(" "),s("td"),t._v(" "),s("td",[t._v("text")]),t._v(" "),s("td",[s("code",[t._v('"none"')])]),t._v(" "),s("td",[t._v("Type of flow control for sending. Valid values are: "),s("code",[t._v('"none"')]),t._v(", "),s("code",[t._v('"xon/xoff out"')]),t._v(", "),s("code",[t._v('"rts/cts out"')]),t._v(".")])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("timeBetweenTransactionsMillis")])]),t._v(" "),s("td"),t._v(" "),s("td",[t._v("integer")]),t._v(" "),s("td",[s("code",[t._v("35")])]),t._v(" "),s("td",[t._v("How long to delay we must have at minimum between two consecutive MODBUS transactions. In milliseconds.")])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("connectMaxTries")])]),t._v(" "),s("td"),t._v(" "),s("td",[t._v("integer")]),t._v(" "),s("td",[s("code",[t._v("1")])]),t._v(" "),s("td",[t._v("How many times we try to establish the connection. Should be at least 1.")])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("connectTimeoutMillis")])]),t._v(" "),s("td"),t._v(" "),s("td",[t._v("integer")]),t._v(" "),s("td",[s("code",[t._v("10000")])]),t._v(" "),s("td",[t._v("The maximum time that is waited when establishing the connection. Value of zero means thatsystem/OS default is respected. In milliseconds.")])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("enableDiscovery")])]),t._v(" "),s("td"),t._v(" "),s("td",[t._v("boolean")]),t._v(" "),s("td",[t._v("false")]),t._v(" "),s("td",[t._v("Enable auto-discovery feature. Effective only if a supporting extension has been installed.")])])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("With the exception of "),e("code",[this._v("id")]),this._v(" parameters should be equal for all "),e("code",[this._v("serial")]),this._v(" things sharing the same "),e("code",[this._v("port")]),this._v(".")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("These parameters have conservative defaults, meaning that they should work for most users.\nIn some cases when extreme performance is required (e.g. poll period below 10ms), one might want to decrease the delay parameters, especially "),e("code",[this._v("timeBetweenTransactionsMillis")]),this._v(".\nWith some slower devices on might need to increase the values.")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("With low baud rates and/or long read requests (that is, many items polled), there might be need to increase the read timeout "),e("code",[this._v("receiveTimeoutMillis")]),this._v(" to e.g. "),e("code",[this._v("5000")]),this._v(" (=5 seconds).")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"poller-thing"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#poller-thing","aria-hidden":"true"}},[this._v("#")]),this._v(" "),e("code",[this._v("poller")]),this._v(" Thing")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("code",[this._v("poller")]),this._v(" thing takes care of polling the Modbus serial slave or Modbus TCP server data regularly.\nYou must give each of your bridge Things a reference (thing ID) that is unique for this binding.")])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("table",[s("thead",[s("tr",[s("th",[t._v("Parameter")]),t._v(" "),s("th",[t._v("Type")]),t._v(" "),s("th",[t._v("Required")]),t._v(" "),s("th",[t._v("Default if omitted")]),t._v(" "),s("th",[t._v("Description")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[s("code",[t._v("start")])]),t._v(" "),s("td",[t._v("integer")]),t._v(" "),s("td"),t._v(" "),s("td",[s("code",[t._v("0")])]),t._v(" "),s("td",[t._v("Address of the first register, coil, or discrete input to poll. Input as zero-based index number.")])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("length")])]),t._v(" "),s("td",[t._v("integer")]),t._v(" "),s("td",[t._v("✓")]),t._v(" "),s("td",[t._v("(-)")]),t._v(" "),s("td",[t._v("Number of registers, coils or discrete inputs to read.")])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("type")])]),t._v(" "),s("td",[t._v("text")]),t._v(" "),s("td",[t._v("✓")]),t._v(" "),s("td",[t._v("(-)")]),t._v(" "),s("td",[t._v("Type of modbus items to poll. This matches directly to Modbus request type or function code (FC). Valid values are: "),s("code",[t._v('"coil"')]),t._v(" (FC01), "),s("code",[t._v('"discrete"')]),t._v(" (FC02), "),s("code",[t._v('"holding"')]),t._v("(FC03), "),s("code",[t._v('"input"')]),t._v(" (FC04).")])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("refresh")])]),t._v(" "),s("td",[t._v("integer")]),t._v(" "),s("td"),t._v(" "),s("td",[s("code",[t._v("500")])]),t._v(" "),s("td",[t._v("Poll interval in milliseconds. Use zero to disable automatic polling.")])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("maxTries")])]),t._v(" "),s("td",[t._v("integer")]),t._v(" "),s("td"),t._v(" "),s("td",[s("code",[t._v("3")])]),t._v(" "),s("td",[t._v("Maximum tries when reading. "),s("br"),s("br"),t._v("Number of tries when reading data, if some of the reading fail. For single try, enter 1.")])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("cacheMillis")])]),t._v(" "),s("td",[t._v("integer")]),t._v(" "),s("td"),t._v(" "),s("td",[s("code",[t._v("50")])]),t._v(" "),s("td",[t._v("Duration for data cache to be valid, in milliseconds. This cache is used only to serve "),s("code",[t._v("REFRESH")]),t._v("  commands. Use zero to disable the caching.")])])])])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("p",[t._v("Note: Polling can be manually triggered by sending "),s("code",[t._v("REFRESH")]),t._v(" command to item bound to channel of "),s("code",[t._v("data")]),t._v(" thing.\nWhen manually triggering polling, a new poll is executed as soon as possible, and sibling "),s("code",[t._v("data")]),t._v(" things (i.e. things that share the same "),s("code",[t._v("poller")]),t._v(" bridge) are updated.\nIn case the "),s("code",[t._v("poller")]),t._v(" had just received a data response or an error occurred, a cached response is used instead.\nSee "),s("a",{attrs:{href:"#refresh-command"}},[t._v("Refresh command")]),t._v(" section for more details.")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"data-thing"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#data-thing","aria-hidden":"true"}},[this._v("#")]),this._v(" "),e("code",[this._v("data")]),this._v(" Thing")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("code",[this._v("data")]),this._v(" is responsible of extracting relevant piece of data (e.g. a number "),e("code",[this._v("3.14")]),this._v(") from binary received from the slave.\nSimilarly, "),e("code",[this._v("data")]),this._v(" thing is responsible of converting openHAB commands to write requests to the Modbus slave.\nn.b. note that some numerics like 'readStart' need to be entered as 'text'.\nYou must give each of your data Things a reference (thing ID) that is unique for this binding.")])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("table",[s("thead",[s("tr",[s("th",[t._v("Parameter")]),t._v(" "),s("th",[t._v("Type")]),t._v(" "),s("th",[t._v("Required")]),t._v(" "),s("th",[t._v("Default if omitted")]),t._v(" "),s("th",[t._v("Description")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[s("code",[t._v("readValueType")])]),t._v(" "),s("td",[t._v("text")]),t._v(" "),s("td"),t._v(" "),s("td",[t._v("(empty)")]),t._v(" "),s("td",[t._v("How data is read from modbus. Use empty for write-only things."),s("br"),s("br"),t._v("Bit value type must be used with coils and discrete inputs. With registers all value types are applicable. Valid values are: "),s("code",[t._v('"int64"')]),t._v(", "),s("code",[t._v('"int64_swap"')]),t._v(", "),s("code",[t._v('"uint64"')]),t._v(", "),s("code",[t._v('"uint64_swap"')]),t._v(", "),s("code",[t._v('"float32"')]),t._v(", "),s("code",[t._v('"float32_swap"')]),t._v(", "),s("code",[t._v('"int32"')]),t._v(", "),s("code",[t._v('"int32_swap"')]),t._v(", "),s("code",[t._v('"uint32"')]),t._v(", "),s("code",[t._v('"uint32_swap"')]),t._v(", "),s("code",[t._v('"int16"')]),t._v(", "),s("code",[t._v('"uint16"')]),t._v(", "),s("code",[t._v('"int8"')]),t._v(", "),s("code",[t._v('"uint8"')]),t._v(", or "),s("code",[t._v('"bit"')]),t._v(". See also "),s("a",{attrs:{href:"#value-types-on-read-and-write"}},[t._v("Value types on read and write")]),t._v(".")])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("readStart")])]),t._v(" "),s("td",[t._v("text")]),t._v(" "),s("td"),t._v(" "),s("td",[t._v("(empty)")]),t._v(" "),s("td",[t._v("Start address to start reading the value. Use empty for write-only things. "),s("br"),s("br"),t._v("Input as zero-based index number, e.g. in place of "),s("code",[t._v("400001")]),t._v(" (first holding register), use the address "),s("code",[t._v('"0"')]),t._v(".  Must be between (poller start) and (poller start + poller length - 1) (inclusive)."),s("br"),s("br"),t._v("With registers and value type less than 16 bits, you must use "),s("code",[t._v('"X.Y"')]),t._v(" format where "),s("code",[t._v("Y")]),t._v(" specifies the sub-element to read from the 16 bit register:"),s("ul",[s("li",[t._v("For example, "),s("code",[t._v('"3.1"')]),t._v(" would mean pick second bit from register index "),s("code",[t._v("3")]),t._v(" with bit value type. ")]),s("li",[t._v("With int8 valuetype, it would pick the high byte of register index "),s("code",[t._v("3")]),t._v(".")])])])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("readTransform")])]),t._v(" "),s("td",[t._v("text")]),t._v(" "),s("td"),t._v(" "),s("td",[s("code",[t._v('"default"')])]),t._v(" "),s("td",[t._v("Transformation to apply to polled data, after it has been converted to number using "),s("code",[t._v("readValueType")]),t._v(". "),s("br"),s("br"),t._v('Use "default" to communicate that no transformation is done and value should be passed as is.'),s("br"),t._v("Use "),s("code",[t._v('"SERVICENAME(ARG)"')]),t._v(" to use transformation service "),s("code",[t._v("SERVICENAME")]),t._v(" with argument "),s("code",[t._v("ARG")]),t._v(". "),s("br"),t._v("Any other value than the above types will be interpreted as static text, in which case the actual content of the polled value is ignored.")])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("writeValueType")])]),t._v(" "),s("td",[t._v("text")]),t._v(" "),s("td"),t._v(" "),s("td",[t._v("(empty)")]),t._v(" "),s("td",[t._v("How data is written to modbus. Only applicable to registers. Valid values are: "),s("code",[t._v('"int64"')]),t._v(", "),s("code",[t._v('"int64_swap"')]),t._v(", "),s("code",[t._v('"float32"')]),t._v(", "),s("code",[t._v('"float32_swap"')]),t._v(", "),s("code",[t._v('"int32"')]),t._v(", "),s("code",[t._v('"int32_swap"')]),t._v(", "),s("code",[t._v('"int16"')]),t._v(". See also "),s("a",{attrs:{href:"#value-types-on-read-and-write"}},[t._v("Value types on read and write")]),t._v(".")])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("writeStart")])]),t._v(" "),s("td",[t._v("text")]),t._v(" "),s("td"),t._v(" "),s("td",[t._v("(empty)")]),t._v(" "),s("td",[t._v("Start address of the first holding register or coil in the write. Use empty for read-only things. "),s("br"),t._v("Use zero based address, e.g. in place of "),s("code",[t._v("400001")]),t._v(" (first holding register), use the address "),s("code",[t._v('"0"')]),t._v(". This address is passed to data frame as is.")])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("writeType")])]),t._v(" "),s("td",[t._v("text")]),t._v(" "),s("td"),t._v(" "),s("td",[t._v("(empty)")]),t._v(" "),s("td",[t._v("Type of data to write. Use empty for read-only things. Valid values: "),s("code",[t._v('"coil"')]),t._v(" or "),s("code",[t._v('"holding"')]),t._v("."),s("br"),s("br"),t._v(" Coil uses function code (FC) FC05 or FC15. Holding register uses FC06 or FC16. See "),s("code",[t._v("writeMultipleEvenWithSingleRegisterOrCoil")]),t._v(" parameter.")])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("writeTransform")])]),t._v(" "),s("td",[t._v("text")]),t._v(" "),s("td"),t._v(" "),s("td",[s("code",[t._v('"default"')])]),t._v(" "),s("td",[t._v("Transformation to apply to received commands."),s("br"),s("br"),t._v("Use "),s("code",[t._v('"default"')]),t._v(" to communicate that no transformation is done and value should be passed as is.    "),s("br"),t._v("Use "),s("code",[t._v('"SERVICENAME(ARG)"')]),t._v(" to use transformation service "),s("code",[t._v("SERVICENAME")]),t._v(" with argument "),s("code",[t._v("ARG")]),t._v(".    "),s("br"),t._v("Any other value than the above types will be interpreted as static text, in which case the actual content of the command value is ignored.")])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("writeMultipleEvenWithSingleRegisterOrCoil")])]),t._v(" "),s("td",[t._v("boolean")]),t._v(" "),s("td"),t._v(" "),s("td",[s("code",[t._v("false")])]),t._v(" "),s("td",[t._v("Controls how single register / coil of data is written."),s("br"),t._v(' By default, or when \'false, FC06 ("Write single holding register") / FC05 ("Write single coil"). Or when \'true\', using FC16 ("Write Multiple Holding Registers") / FC15 ("Write Multiple Coils").')])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("writeMaxTries")])]),t._v(" "),s("td",[t._v("integer")]),t._v(" "),s("td"),t._v(" "),s("td",[s("code",[t._v("3")])]),t._v(" "),s("td",[t._v("Maximum tries when writing "),s("br"),s("br"),t._v("Number of tries when writing data, if some of the writes fail. For single try, enter "),s("code",[t._v("1")]),t._v(".")])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("updateUnchangedValuesEveryMillis")])]),t._v(" "),s("td",[t._v("integer")]),t._v(" "),s("td"),t._v(" "),s("td",[s("code",[t._v("1000")])]),t._v(" "),s("td",[t._v("Interval to update unchanged values. "),s("br"),s("br"),t._v("Modbus binding by default is not updating the item and channel state every time new data is polled from a slave, for performance reasons. Instead, the state is updated whenever it differs from previously updated state, or when enough time has passed since the last update. The time interval can be adjusted using this parameter. Use value of "),s("code",[t._v("0")]),t._v(" if you like to update state with every poll, even though the value has not changed. In milliseconds.")])])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"channels"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#channels","aria-hidden":"true"}},[this._v("#")]),this._v(" Channels")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("Only the "),e("code",[this._v("data")]),this._v(' thing has channels.\nIt has several "data channels", serving the polled data in different formats, and for accepting openHAB commands from different item types.')])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("Please note that transformations might be "),e("em",[this._v("necessary")]),this._v(" in order to update some data channels, or to convert some openHAB commands to suitable Modbus data.\nSee "),e("a",{attrs:{href:"#transformations"}},[this._v("Transformations")]),this._v(" for more details.")])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("table",[s("thead",[s("tr",[s("th",[t._v("Channel Type ID")]),t._v(" "),s("th",[t._v("Item Type")]),t._v(" "),s("th",[t._v("Description")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[s("code",[t._v("number")])]),t._v(" "),s("td",[s("code",[t._v("Number")])]),t._v(" "),s("td",[t._v("Data as number")])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("switch")])]),t._v(" "),s("td",[s("code",[t._v("Switch")])]),t._v(" "),s("td",[t._v("Data as switch ("),s("code",[t._v("ON")]),t._v(" / "),s("code",[t._v("OFF")]),t._v(")")])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("contact")])]),t._v(" "),s("td",[s("code",[t._v("Contact")])]),t._v(" "),s("td",[t._v("Data as contact ("),s("code",[t._v("OPEN")]),t._v(" / "),s("code",[t._v("CLOSED")]),t._v(")")])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("dimmer")])]),t._v(" "),s("td",[s("code",[t._v("Dimmer")])]),t._v(" "),s("td",[t._v("Data as dimmer")])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("datetime")])]),t._v(" "),s("td",[s("code",[t._v("DateTime")])]),t._v(" "),s("td",[t._v("Data as a date time")])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("string")])]),t._v(" "),s("td",[s("code",[t._v("String")])]),t._v(" "),s("td",[t._v("Data as string")])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("rollershutter")])]),t._v(" "),s("td",[s("code",[t._v("Rollershutter")])]),t._v(" "),s("td",[t._v("Data as roller shutter")])])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("You can send a "),e("code",[this._v("REFRESH")]),this._v(" command to items linked to any of the above channels to ask binding to explicitly poll new data from the Modbus slave.\nSee "),e("a",{attrs:{href:"#refresh-command"}},[this._v("Refresh command")]),this._v(" section for more details.")])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("table",[s("thead",[s("tr",[s("th",[t._v("Channel Type ID")]),t._v(" "),s("th",[t._v("Item Type")]),t._v(" "),s("th",[t._v("Description")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[s("code",[t._v("lastReadSuccess")])]),t._v(" "),s("td",[s("code",[t._v("DateTime")])]),t._v(" "),s("td",[t._v("Last successful read")])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("lastReadError")])]),t._v(" "),s("td",[s("code",[t._v("DateTime")])]),t._v(" "),s("td",[t._v("Last erroring read")])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("lastWriteSuccess")])]),t._v(" "),s("td",[s("code",[t._v("DateTime")])]),t._v(" "),s("td",[t._v("Last successful write")])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("lastWriteError")])]),t._v(" "),s("td",[s("code",[t._v("DateTime")])]),t._v(" "),s("td",[t._v("Last erroring write")])])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"item-configuration"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#item-configuration","aria-hidden":"true"}},[this._v("#")]),this._v(" Item configuration")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("Items are configured the typical way, using "),e("code",[this._v("channel")]),this._v(" to bind the item to a particular channel.")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("For example, in the following example, item "),e("code",[this._v("Temperature_Modbus_Livingroom")]),this._v(" is bound to channel "),e("code",[this._v("number")]),this._v(" of thing "),e("code",[this._v("modbus:data:siemensplc:holding:livingroom_temperature")]),this._v(".")])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("Number  Temperature_Modbus_Livingroom                       "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Temperature Living room [%.1f °C]"')]),t._v("           "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("temperature"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("   "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("channel")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"modbus:data:siemensplc:holding:livingroom_temperature:number"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("Make sure you bind item to a channel that is compatible, or use transformations to make it compatible.\nSee "),e("a",{attrs:{href:"#transformations"}},[this._v("Transformations")]),this._v(" section for more information on transformation.")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"autoupdate-parameter-with-items"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#autoupdate-parameter-with-items","aria-hidden":"true"}},[this._v("#")]),this._v(" "),e("code",[this._v("autoupdate")]),this._v(" parameter with items")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("By default, openHAB has "),e("code",[this._v("autoupdate")]),this._v(" enabled.\nThis means that item "),e("em",[this._v("state")]),this._v(" is updated according to received commands.\nIn some situations this might have unexpected side effects with polling bindings such as Modbus - see example below.")])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-rules"}},[s("code",[s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("ome"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("event"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("ItemCommandEvent"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Item")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Kitchen_Bar_Table_Light'")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("received command")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("ON")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("vent"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("ItemStateChangedEvent"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" Kitchen_Bar_Table_Light "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("changed")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("OFF")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("to")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("ON")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("vent"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("ItemStateChangedEvent"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" Kitchen_Bar_Table_Light "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("changed")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("ON")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("to")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("OFF")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("vent"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("ItemStateChangedEvent"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" Kitchen_Bar_Table_Light "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("changed")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("OFF")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("to")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("ON")]),t._v("\n")])])])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-rules"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// openHAB UI switch changed command is sent")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("ome"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("event"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("ItemCommandEvent"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Item")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Kitchen_Bar_Table_Light'")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("received command")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("ON")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// openHAB immediately updates the item state to match the command")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("vent"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("ItemStateChangedEvent"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" Kitchen_Bar_Table_Light "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("changed")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("OFF")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("to")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("ON")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// modbus binding poll completes (old value)")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("vent"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("ItemStateChangedEvent"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" Kitchen_Bar_Table_Light "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("changed")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("ON")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("to")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("OFF")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// (the binding writes the command over Modbus to the slave)")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// modbus binding poll completes (updated value)")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("vent"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("ItemStateChangedEvent"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" Kitchen_Bar_Table_Light "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("changed")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("OFF")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("to")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("ON")]),t._v("\n")])])])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("p",[t._v('To prevent this "state fluctuation" ('),s("code",[t._v("OFF")]),t._v(" -> "),s("code",[t._v("ON")]),t._v(" -> "),s("code",[t._v("OFF")]),t._v(" -> "),s("code",[t._v("ON")]),t._v("), some people prefer to disable "),s("code",[t._v("autoupdate")]),t._v(" on Items used with polling bindings.\nWith "),s("code",[t._v("autoupdate")]),t._v(" disabled, one would get")])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-rules"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// openHAB UI switch changed command is sent")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("ome"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("event"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("ItemCommandEvent"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Item")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Kitchen_Bar_Table_Light'")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("received command")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("ON")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// modbus binding poll completes (STILL the old value) -- UI not updated, still showing OFF")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// (the binding writes the command over Modbus to the slave)")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// modbus binding poll completes (updated value)")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("vent"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("ItemStateChangedEvent"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" Kitchen_Bar_Table_Light "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("changed")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("OFF")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("to")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("ON")]),t._v("\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v('Item state has no "fluctuation", it updates from '),e("code",[this._v("OFF")]),this._v(" to "),e("code",[this._v("ON")]),this._v(".")])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("ul",[s("li",[s("code",[t._v('autoupdate="false"')]),t._v(": monitor the "),s("em",[t._v("actual")]),t._v(" state of device")]),t._v(" "),s("li",[s("code",[t._v('autoupdate="true"')]),t._v(": (or defaulted) allows faster display of the "),s("em",[t._v("expected")]),t._v(" state in a sitemap")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("You can disable "),e("code",[this._v("autoupdate")]),this._v(" as follows:")])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("Number  Temperature_Modbus_Livingroom                       "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Temperature Living room [%.1f °C]"')]),t._v("           "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("temperature"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("   "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("channel")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"modbus:data:siemensplc:holding:livingroom_temperature:number"')]),t._v(", "),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("autoupdate")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"false"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"discovery"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#discovery","aria-hidden":"true"}},[this._v("#")]),this._v(" Discovery")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("Device specific modbus bindings can take part in the discovery of things, and detect devices automatically. The discovery is initiated by the "),e("code",[this._v("tcp")]),this._v(" and "),e("code",[this._v("serial")]),this._v(" bridges when they have "),e("code",[this._v("enableDiscovery")]),this._v(" setting enabled.")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"details"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#details","aria-hidden":"true"}},[this._v("#")]),this._v(" Details")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"comment-on-addressing"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#comment-on-addressing","aria-hidden":"true"}},[this._v("#")]),this._v(" Comment On Addressing")])},function(){var t=this.$createElement,e=this._self._c||t;return e("blockquote",[e("p",[this._v("In the traditional standard, [entity] numbers for those entities start with a digit, followed by a number of four digits in range 1–9,999:")])])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("blockquote",[s("ul",[s("li",[t._v("coils numbers start with a zero and then span from 00001 to 09999")]),t._v(" "),s("li",[t._v("discrete input numbers start with a one and then span from 10001 to 19999")]),t._v(" "),s("li",[t._v("input register numbers start with a three and then span from 30001 to 39999")]),t._v(" "),s("li",[t._v("holding register numbers start with a four and then span from 40001 to 49999")])]),t._v(" "),s("p",[t._v("This translates into [entity] addresses between 0 and 9,998 in data frames.")])])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("p",[t._v("The openHAB modbus binding uses data frame entity addresses when referring to modbus entities.\nThat is, the entity address configured in modbus binding is passed to modbus protocol frame as-is.\nFor example, Modbus "),s("code",[t._v("poller")]),t._v(" thing with "),s("code",[t._v("start=3")]),t._v(", "),s("code",[t._v("length=2")]),t._v(" and "),s("code",[t._v("type=holding")]),t._v(" will read modbus entities with the following numbers 40004 and 40005.\nThe manufacturer of any modbus device may choose to use either notation, you may have to infer which, or use trial and error.")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"value-types-on-read-and-write"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#value-types-on-read-and-write","aria-hidden":"true"}},[this._v("#")]),this._v(" Value Types On Read And Write")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("This section explains the detailed descriptions of different value types on read and write.\nNote that value types less than 16 bits are not supported on write to holding registers (see "),e("a",{attrs:{href:"#poller-thing"}},[this._v("poller thing")]),this._v(" documentation for details).")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("See "),e("a",{attrs:{href:"#full-examples"}},[this._v("Full examples")]),this._v(" section for practical examples.")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h4",{attrs:{id:"bit"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#bit","aria-hidden":"true"}},[this._v("#")]),this._v(" "),e("code",[this._v("bit")]),this._v(":")])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("ul",[s("li",[t._v("a single bit is read from the registers")]),t._v(" "),s("li",[t._v("address is given as "),s("code",[t._v("X.Y")]),t._v(", where "),s("code",[t._v("Y")]),t._v(" is between 0...15 (inclusive), representing bit of the register "),s("code",[t._v("X")])]),t._v(" "),s("li",[t._v("index "),s("code",[t._v("Y=0")]),t._v(" refers to the least significant bit")]),t._v(" "),s("li",[t._v("index "),s("code",[t._v("Y=1")]),t._v(" refers to the second least significant bit, etc.")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h4",{attrs:{id:"int8"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#int8","aria-hidden":"true"}},[this._v("#")]),this._v(" "),e("code",[this._v("int8")]),this._v(":")])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("ul",[s("li",[t._v("a byte (8 bits) from the registers is interpreted as signed integer")]),t._v(" "),s("li",[t._v("address is given as "),s("code",[t._v("X.Y")]),t._v(", where "),s("code",[t._v("Y")]),t._v(" is between 0...1 (inclusive), representing byte of the register "),s("code",[t._v("X")])]),t._v(" "),s("li",[t._v("index "),s("code",[t._v("Y=0")]),t._v(" refers to low byte")]),t._v(" "),s("li",[t._v("index "),s("code",[t._v("Y=1")]),t._v(" refers to high byte")]),t._v(" "),s("li",[t._v("it is assumed that each high and low byte is encoded in most significant bit first order")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h4",{attrs:{id:"uint8"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#uint8","aria-hidden":"true"}},[this._v("#")]),this._v(" "),e("code",[this._v("uint8")]),this._v(":")])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[this._v("same as "),e("code",[this._v("int8")]),this._v(" except value is interpreted as unsigned integer")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h4",{attrs:{id:"int16"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#int16","aria-hidden":"true"}},[this._v("#")]),this._v(" "),e("code",[this._v("int16")]),this._v(":")])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[this._v("register with index is interpreted as 16 bit signed integer.")]),this._v(" "),e("li",[this._v("it is assumed that register is encoded in most significant bit first order")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h4",{attrs:{id:"uint16"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#uint16","aria-hidden":"true"}},[this._v("#")]),this._v(" "),e("code",[this._v("uint16")]),this._v(":")])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[this._v("same as "),e("code",[this._v("int16")]),this._v(" except value is interpreted as unsigned integer")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h4",{attrs:{id:"int32"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#int32","aria-hidden":"true"}},[this._v("#")]),this._v(" "),e("code",[this._v("int32")]),this._v(":")])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("ul",[s("li",[t._v("registers "),s("code",[t._v("index")]),t._v(" and "),s("code",[t._v("(index + 1)")]),t._v(" are interpreted as signed 32bit integer")]),t._v(" "),s("li",[t._v("it assumed that the first register contains the most significant 16 bits")]),t._v(" "),s("li",[t._v("it is assumed that each register is encoded in most significant bit first order")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h4",{attrs:{id:"uint32"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#uint32","aria-hidden":"true"}},[this._v("#")]),this._v(" "),e("code",[this._v("uint32")]),this._v(":")])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[this._v("same as "),e("code",[this._v("int32")]),this._v(" except value is interpreted as unsigned integer")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h4",{attrs:{id:"float32"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#float32","aria-hidden":"true"}},[this._v("#")]),this._v(" "),e("code",[this._v("float32")]),this._v(":")])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("ul",[s("li",[t._v("registers "),s("code",[t._v("index")]),t._v(" and "),s("code",[t._v("(index + 1)")]),t._v(" are interpreted as signed 32bit floating point number")]),t._v(" "),s("li",[t._v("it assumed that the first register contains the most significant 16 bits")]),t._v(" "),s("li",[t._v("it is assumed that each register is encoded in most significant bit first order")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h4",{attrs:{id:"int64"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#int64","aria-hidden":"true"}},[this._v("#")]),this._v(" "),e("code",[this._v("int64")]),this._v(":")])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("ul",[s("li",[t._v("registers "),s("code",[t._v("index")]),t._v(", "),s("code",[t._v("(index + 1)")]),t._v(", "),s("code",[t._v("(index + 2)")]),t._v(", "),s("code",[t._v("(index + 3)")]),t._v(" are interpreted as signed 64bit integer.")]),t._v(" "),s("li",[t._v("it assumed that the first register contains the most significant 16 bits")]),t._v(" "),s("li",[t._v("it is assumed that each register is encoded in most significant bit first order")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h4",{attrs:{id:"uint64"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#uint64","aria-hidden":"true"}},[this._v("#")]),this._v(" "),e("code",[this._v("uint64")]),this._v(":")])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[this._v("same as "),e("code",[this._v("int64")]),this._v(" except value is interpreted as unsigned integer")])])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("p",[t._v("If you get strange values using the "),s("code",[t._v("int32")]),t._v(", "),s("code",[t._v("uint32")]),t._v(", "),s("code",[t._v("float32")]),t._v(", "),s("code",[t._v("int64")]),t._v(", or "),s("code",[t._v("uint64")]),t._v(" valuetypes then just try the "),s("code",[t._v("int32_swap")]),t._v(", "),s("code",[t._v("uint32_swap")]),t._v(", "),s("code",[t._v("float32_swap")]),t._v(", "),s("code",[t._v("int64_swap")]),t._v(", or "),s("code",[t._v("uint64_swap")]),t._v(" valuetype, depending upon what your data type is.")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h4",{attrs:{id:"int32-swap"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#int32-swap","aria-hidden":"true"}},[this._v("#")]),this._v(" "),e("code",[this._v("int32_swap")]),this._v(":")])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("ul",[s("li",[t._v("registers "),s("code",[t._v("index")]),t._v(" and "),s("code",[t._v("(index + 1)")]),t._v(" are interpreted as signed 32bit integer")]),t._v(" "),s("li",[t._v("it assumed that the first register contains the least significant 16 bits")]),t._v(" "),s("li",[t._v("it is assumed that each register is encoded in most significant bit first order (Big Endian)")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h4",{attrs:{id:"uint32-swap"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#uint32-swap","aria-hidden":"true"}},[this._v("#")]),this._v(" "),e("code",[this._v("uint32_swap")]),this._v(":")])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[this._v("same as "),e("code",[this._v("int32_swap")]),this._v(" except value is interpreted as unsigned integer")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h4",{attrs:{id:"float32-swap"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#float32-swap","aria-hidden":"true"}},[this._v("#")]),this._v(" "),e("code",[this._v("float32_swap")]),this._v(":")])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("ul",[s("li",[t._v("registers "),s("code",[t._v("index")]),t._v(" and "),s("code",[t._v("(index + 1)")]),t._v(" are interpreted as signed 32bit floating point number")]),t._v(" "),s("li",[t._v("it assumed that the first register contains the least significant 16 bits")]),t._v(" "),s("li",[t._v("it is assumed that each register is encoded in most significant bit first order (Big Endian)")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h4",{attrs:{id:"int64-swap"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#int64-swap","aria-hidden":"true"}},[this._v("#")]),this._v(" "),e("code",[this._v("int64_swap")]),this._v(":")])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[this._v("same as "),e("code",[this._v("int64")]),this._v(" but registers swapped, that is, registers (index + 3), (index + 2), (index + 1), (index + 1) are interpreted as signed 64bit integer")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h4",{attrs:{id:"uint64-swap"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#uint64-swap","aria-hidden":"true"}},[this._v("#")]),this._v(" "),e("code",[this._v("uint64_swap")]),this._v(":")])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[this._v("same as "),e("code",[this._v("uint64")]),this._v(" except value is interpreted as unsigned integer")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"refresh-command"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#refresh-command","aria-hidden":"true"}},[this._v("#")]),this._v(" REFRESH Command")])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("p",[s("code",[t._v("REFRESH")]),t._v(" command to item bound to any "),s("a",{attrs:{href:"#channels"}},[t._v("data channel")]),t._v(" makes "),s("code",[t._v("poller")]),t._v(" thing to poll new from the Modbus slave.\nAll data channels of children "),s("code",[t._v("data")]),t._v(" things are refreshed per the normal logic.")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("code",[this._v("REFRESH")]),this._v(" can be useful tool if you like to refresh only on demand ("),e("code",[this._v("poller")]),this._v(" has refresh disabled, i.e. "),e("code",[this._v("refresh=0")]),this._v("), or have custom logic of refreshing only in some special cases.")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("Note that poller has "),e("code",[this._v("cacheMillis")]),this._v(" parameter to re-use previously received data, and thus avoid polling the Modbus slave too much.\nThis parameter is specifically limiting the flood of requests that come when openHAB itself is calling "),e("code",[this._v("REFRESH")]),this._v(" for new things.")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"read-steps"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#read-steps","aria-hidden":"true"}},[this._v("#")]),this._v(" Read Steps")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("Every time data is read by the binding, these steps are taken to convert the raw binary data to actual item "),e("code",[this._v("State")]),this._v(" in openHAB:")])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("ol",[s("li",[t._v("Poll the data from Modbus slave.\nData received is stored in list of bits (discrete inputs and coils), or in list of registers (input registers and holding registers)")]),t._v(" "),s("li",[t._v("Extract a single number from the polled data, using specified location "),s("code",[t._v("readStart")]),t._v(' and number "value type" '),s("code",[t._v("readValueType")]),t._v(".\nAs an example, we can tell the binding to extract 32-bit float ("),s("code",[t._v('readValueType="float32"')]),t._v(") from register index "),s("code",[t._v('readStart="105"')]),t._v(".")]),t._v(" "),s("li",[t._v("Number is converted to string (e.g. "),s("code",[t._v('"3.14"')]),t._v(") and passed as input to the transformation.\nNote that in case "),s("code",[t._v('readTransform="default"')]),t._v(", a default transformation provided by the binding is used.\nSee "),s("a",{attrs:{href:"#transformations"}},[t._v("Transformations")]),t._v(" section for more details.")]),t._v(" "),s("li",[t._v("For each "),s("a",{attrs:{href:"#channels"}},[t._v("data channel")]),t._v(", we try to convert the transformation output of previous step to a State type (e.g. "),s("code",[t._v("ON")]),t._v("/"),s("code",[t._v("OFF")]),t._v(", or "),s("code",[t._v("DecimalType")]),t._v(") accepted by the channel.\nIf all the conversions fail (e.g. trying to convert "),s("code",[t._v("ON")]),t._v(" to a number), the data channel is not updated.")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("In case of read errors, all data channels are left unchanged, and "),e("code",[this._v("lastReadError")]),this._v(" channel is updated with current time.\nExamples of errors include connection errors, IO errors on read, and explicit exception responses from the slave.")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("Note: there is a performance optimization that channel state is only updated when enough time has passed since last update, or when the state differs from previous update.\nSee "),e("code",[this._v("updateUnchangedValuesEveryMillis")]),this._v(" parameter in "),e("code",[this._v("data")]),this._v(" thing.")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"write-steps"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#write-steps","aria-hidden":"true"}},[this._v("#")]),this._v(" Write Steps")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h4",{attrs:{id:"basic-case"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#basic-case","aria-hidden":"true"}},[this._v("#")]),this._v(" Basic Case")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("Commands passed to openHAB items that are bound to a "),e("a",{attrs:{href:"#channels"}},[this._v("data channel")]),this._v(" are most often processed according to following steps:")])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("ol",[s("li",[t._v("Command is sent to openHAB item, that is bound to a "),s("a",{attrs:{href:"#channels"}},[t._v("data channel")]),t._v(".\nCommand must be such that it is accepted by the item in the first place")]),t._v(" "),s("li",[t._v("Command is converted to string (e.g. "),s("code",[t._v('"3.14"')]),t._v(") and passed to the transformation.\nNote that in case "),s("code",[t._v('readTransform="default"')]),t._v(", a default transformation provided by the binding is used.\nSee "),s("a",{attrs:{href:"#transformations"}},[t._v("Transformations")]),t._v(" section for more details.")]),t._v(" "),s("li",[t._v("We try to convert transformation output to number ("),s("code",[t._v("DecimalType")]),t._v("), "),s("code",[t._v("OPEN")]),t._v("/"),s("code",[t._v("CLOSED")]),t._v(" ("),s("code",[t._v("OpenClosedType")]),t._v("), and "),s("code",[t._v("ON")]),t._v("/"),s("code",[t._v("OFF")]),t._v(" ("),s("code",[t._v("OnOffType")]),t._v("); in this order.\nFirst successful conversion is stored.\nFor example, "),s("code",[t._v('"3.14"')]),t._v(" would convert to number ("),s("code",[t._v("DecimalType")]),t._v("), while "),s("code",[t._v('"CLOSED"')]),t._v(" would convert to "),s("code",[t._v("CLOSED")]),t._v(" (of "),s("code",[t._v("OpenClosedType")]),t._v(").'\nIn case all conversions fail, the command is discarded and nothing is written to the Modbus slave.")]),t._v(" "),s("li",[t._v("Next step depends on the "),s("code",[t._v("writeType")]),t._v(":\n"),s("ul",[s("li",[s("code",[t._v('writeType="coil"')]),t._v(": the command from the transformation is converted to boolean.\nNon-zero numbers, "),s("code",[t._v("ON")]),t._v(", and "),s("code",[t._v("OPEN")]),t._v(" are considered "),s("code",[t._v("true")]),t._v("; and rest as "),s("code",[t._v("false")]),t._v(".")]),t._v(" "),s("li",[s("code",[t._v('writeType="holding"')]),t._v(": First, the command from the transformation is converted "),s("code",[t._v("1")]),t._v("/"),s("code",[t._v("0")]),t._v(" number in case of "),s("code",[t._v("OPEN")]),t._v("/"),s("code",[t._v("ON")]),t._v(" or "),s("code",[t._v("CLOSED")]),t._v("/"),s("code",[t._v("OFF")]),t._v(". The number is converted to one or more registers using "),s("code",[t._v("writeValueType")]),t._v(".\nFor example, number "),s("code",[t._v("3.14")]),t._v(" would be converted to two registers when "),s("code",[t._v('writeValueType="float32"')]),t._v(": [0x4048, 0xF5C3].")])])]),t._v(" "),s("li",[t._v("Boolean ("),s("code",[t._v('writeType="coil"')]),t._v(") or registers ("),s("code",[t._v('writeType="holding"')]),t._v(") are written to the Modbus slave using "),s("code",[t._v("FC05")]),t._v(", "),s("code",[t._v("FC06")]),t._v(", "),s("code",[t._v("FC15")]),t._v(", or "),s("code",[t._v("FC16")]),t._v(", depending on the value of "),s("code",[t._v("writeMultipleEvenWithSingleRegisterOrCoil")]),t._v(".\nWrite address is specified by "),s("code",[t._v("writeStart")]),t._v(".")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h4",{attrs:{id:"advanced-write-using-json"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#advanced-write-using-json","aria-hidden":"true"}},[this._v("#")]),this._v(" Advanced Write Using JSON")])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("div",{staticClass:"language-json extra-class"},[s("pre",{pre:!0,attrs:{class:"language-json"}},[s("code",[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v('"functionCode"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("16")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v('"address"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("5412")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v('"value"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v('"functionCode"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("6")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v('"address"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("555")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v('"value"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v('"maxTries"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("ol",[e("li",[this._v("FC16 (write multiple holding register), with start address 5412, having three registers of data (1, 0, and 5).")]),this._v(" "),e("li",[this._v("FC06 (write single holding register), with start address 555, and single register of data (3).\nWrite is tried maximum of 10 times in case some of the writes fail.")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("The JSON transformation output can be useful when you need full control how the write goes, for example in case where the write address depends on the incoming command.\nActually, you can omit specifying "),e("code",[this._v("writeStart")]),this._v(", "),e("code",[this._v("writeValueType")]),this._v(" and "),e("code",[this._v("writeType")]),this._v(" with JSON transformation output altogether.")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("Empty JSON array ("),e("code",[this._v("[]")]),this._v(") can be used to suppress all writes.")])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("table",[s("thead",[s("tr",[s("th",[t._v("Key name")]),t._v(" "),s("th",[t._v("Value type")]),t._v(" "),s("th",[t._v("Required")]),t._v(" "),s("th",[t._v("Default if omitted")]),t._v(" "),s("th",[t._v("Description")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[s("code",[t._v("functionCode")])]),t._v(" "),s("td",[t._v("number")]),t._v(" "),s("td",[t._v("✓")]),t._v(" "),s("td",[t._v("(-)")]),t._v(" "),s("td",[t._v("Modbus function code to use with write. Use one of "),s("code",[t._v("5")]),t._v(", "),s("code",[t._v("6")]),t._v(", "),s("code",[t._v("15")]),t._v(" or "),s("code",[t._v("16")]),t._v(".")])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("address")])]),t._v(" "),s("td",[t._v("number")]),t._v(" "),s("td",[t._v("✓")]),t._v(" "),s("td",[t._v("(-)")]),t._v(" "),s("td",[t._v("Start address of the first holding register or coil in the write. Use empty for read-only things. "),s("br"),t._v("Use zero based address, e.g. in place of 400001 (first holding register), use the address 0. This address is passed to data frame as is.")])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("value")])]),t._v(" "),s("td",[t._v("JSON array of numbers")]),t._v(" "),s("td",[t._v("✓")]),t._v(" "),s("td",[t._v("(-)")]),t._v(" "),s("td",[t._v("Array of coil or register values. Encode coil values as "),s("code",[t._v("0")]),t._v(" or "),s("code",[t._v("1")]),t._v(".")])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("maxTries")])]),t._v(" "),s("td",[t._v("number")]),t._v(" "),s("td"),t._v(" "),s("td",[t._v("3")]),t._v(" "),s("td",[t._v("Number of tries when writing data, in case some of the writes fail. Should be at least 1.")])])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"transformations"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#transformations","aria-hidden":"true"}},[this._v("#")]),this._v(" Transformations")])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[e("code",[this._v("readTransform")]),this._v(": doing preprocessing transformations to read binary data and to make it more usable in openHAB")]),this._v(" "),e("li",[e("code",[this._v("writeTransform")]),this._v(": doing preprocessing to openHAB commands before writing them to Modbus slave")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("Note that transformation is only one part of the overall process how polled data is converted to openHAB state, or how commands are converted to Modbus writes.\nConsult "),e("a",{attrs:{href:"#read-steps"}},[this._v("Read steps")]),this._v(" and "),e("a",{attrs:{href:"#write-steps"}},[this._v("Write steps")]),this._v(" for more details.\nSpecifically, note that you might not need transformations at all in some uses cases.")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("Please also note that you should install relevant transformations in openHAB as necessary.\nFor example, "),e("code",[this._v("openhab-transformation-javascript")]),this._v(" feature provides the javascript ("),e("code",[this._v("JS")]),this._v(") transformation.")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h4",{attrs:{id:"transform-on-read"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#transform-on-read","aria-hidden":"true"}},[this._v("#")]),this._v(" Transform On Read")])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("p",[s("strong",[s("code",[t._v("readTransform")])]),t._v(" can be used to transform the polled data, after a number is extracted from the polled data using "),s("code",[t._v("readValueType")]),t._v(" and "),s("code",[t._v("readStart")]),t._v(" (consult "),s("a",{attrs:{href:"#read-steps"}},[t._v("Read steps")]),t._v(").")])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("ol",[s("li",[t._v("String "),s("code",[t._v('"default"')]),t._v(", in which case the default transformation is used. The default is to convert non-zero numbers to "),s("code",[t._v("ON")]),t._v("/"),s("code",[t._v("OPEN")]),t._v(", and zero numbers to "),s("code",[t._v("OFF")]),t._v("/"),s("code",[t._v("CLOSED")]),t._v(", respectively. If the item linked to the data channel does not accept these states, the number is converted to best-effort-basis to the states accepted by the item. For example, the extracted number is passed as-is for "),s("code",[t._v("Number")]),t._v(" items, while "),s("code",[t._v("ON")]),t._v("/"),s("code",[t._v("OFF")]),t._v(" would be used with "),s("code",[t._v("DimmerItem")]),t._v(".")]),t._v(" "),s("li",[s("code",[t._v('"SERVICENAME(ARG)"')]),t._v(" for calling a transformation service. The transformation receives the extracted number as input. This is useful for example scaling (divide by x) the polled data before it is used in openHAB. See examples for more details.")]),t._v(" "),s("li",[t._v("Any other value is interpreted as static text, in which case the actual content of the polled value is ignored. Transformation result is always the same. The transformation output is converted to best-effort-basis to the states accepted by the item.")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h4",{attrs:{id:"transform-on-write"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#transform-on-write","aria-hidden":"true"}},[this._v("#")]),this._v(" Transform On Write")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("strong",[e("code",[this._v("writeTransform")])]),this._v(" can be used to transform the openHAB command before it is converted to actual binary data (see "),e("a",{attrs:{href:"#write-steps"}},[this._v("Write steps")]),this._v(").")])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("ol",[s("li",[t._v("String "),s("code",[t._v('"default"')]),t._v(", in which case the default transformation is used. The default is to do no conversion to the command.")]),t._v(" "),s("li",[s("code",[t._v('"SERVICENAME(ARG)"')]),t._v(' for calling a transformation service. The transformation receives the command as input. This is useful for example scaling ("multiply by x") commands before the data is written to Modbus. See examples for more details.')]),t._v(" "),s("li",[t._v("Any other value is interpreted as static text, in which case the actual command is ignored. Transformation result is always the same.")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h4",{attrs:{id:"transformation-example-scaling"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#transformation-example-scaling","aria-hidden":"true"}},[this._v("#")]),this._v(" Transformation Example: Scaling")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("code",[this._v("transform/multiply10.js")]),this._v(":")])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Wrap everything in a function (no global variable pollution)")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// variable "input" contains data passed by openHAB')]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("inputData")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// on read: the polled number as string")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// on write: openHAB command as string")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("MULTIPLY_BY")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" Math"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("round")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("parseFloat")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("inputData"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("MULTIPLY_BY")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("input"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("code",[this._v("transform/divide10.js")]),this._v(":")])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Wrap everything in a function (no global variable pollution)")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// variable "input" contains data passed by openHAB')]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("inputData")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// on read: the polled number as string")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// on write: openHAB command as string")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("DIVIDE_BY")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("parseFloat")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("inputData"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("DIVIDE_BY")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("input"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("See "),e("a",{attrs:{href:"#scaling-example"}},[this._v("Scaling example")]),this._v(" for full example with things, items and a sitemap.")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h4",{attrs:{id:"example-inverting-binary-data-on-read-and-write"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#example-inverting-binary-data-on-read-and-write","aria-hidden":"true"}},[this._v("#")]),this._v(" Example: Inverting Binary Data On Read And Write")])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("p",[t._v('This example transformation is able to invert "boolean" input.\nIn this case, boolean input is considered to be either number '),s("code",[t._v("0")]),t._v("/"),s("code",[t._v("1")]),t._v(", "),s("code",[t._v("ON")]),t._v("/"),s("code",[t._v("OFF")]),t._v(", or "),s("code",[t._v("OPEN")]),t._v("/"),s("code",[t._v("CLOSED")]),t._v(".")])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// function to invert Modbus binary states")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// variable "input" contains data passed by openHAB')]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("inputData")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" out "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" inputData "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("      "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// allow UNDEF to pass through")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("inputData "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'1'")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v(" inputData "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'ON'")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v(" inputData "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'OPEN'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        out "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'0'")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// change to OFF or OPEN depending on your Item type")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("inputData "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'0'")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v(" inputData "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'OFF'")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v(" inputData "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'CLOSED'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        out "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'1'")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" out "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("      "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// return a string")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("input"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"full-examples"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#full-examples","aria-hidden":"true"}},[this._v("#")]),this._v(" Full Examples")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("Things can be configured via the Paper UI, or using a "),e("code",[this._v("things")]),this._v(" file like here.")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"basic-example"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#basic-example","aria-hidden":"true"}},[this._v("#")]),this._v(" Basic Example")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("code",[this._v("things/modbus_ex1.things")]),this._v(":")])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("div",{staticClass:"language-xtend extra-class"},[s("pre",{pre:!0,attrs:{class:"language-dsl"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Bridge")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("modbus"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("tcp"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("localhostTCP")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v(" host"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"127.0.0.1"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" port"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("502")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" id"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// read-write for coils. Reading 4 coils, with index 4, and 5.")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// These correspond to input register numbers 000005, and 000005")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Bridge")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("poller")]),t._v(" coils "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v(" start"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" length"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("refresh")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1000")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" type"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"coil"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Note the zero based indexing: first coil is index 0.")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Thing")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("data")]),t._v(" do4 "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v(" readStart"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"4"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" readValueType"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"bit"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" writeStart"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"4"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" writeValueType"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"bit"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" writeType"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"coil"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Thing")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("data")]),t._v(" do5 "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v(" readStart"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"5"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" readValueType"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"bit"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" writeStart"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"5"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" writeValueType"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"bit"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" writeType"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"coil"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// read-write for holding registers. Reading 4 registers, with index 1500, 1501, 1502, 1503.")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// These correspond to holding register numbers 401501, 401502, 401503, 401504.")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Bridge")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("poller")]),t._v(" holding "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v(" start"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1500")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" length"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("refresh")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1000")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" type"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"holding"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Thing")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("data")]),t._v(" holding1500 "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v(" readStart"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"1500"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" readValueType"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"float32"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" writeStart"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"1500"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" writeValueType"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"float32"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" writeType"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"holding"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Thing")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("data")]),t._v(" holding1502 "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v(" readStart"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"1502"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" readValueType"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"float32"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" writeStart"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"1502"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" writeValueType"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"float32"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" writeType"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"holding"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// read-only for input registers. Reading 4 registers, with index 1500, 1501, 1502, 1503.")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// These correspond to input register numbers 301501, 301502, 301503, 301504.")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Bridge")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("poller")]),t._v(" inputRegisters "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v(" start"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1500")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" length"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("refresh")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1000")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" type"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"input"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Thing")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("data")]),t._v(" input1500 "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v(" readStart"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"1500"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" readValueType"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"float32"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Thing")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("data")]),t._v(" input1502 "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v(" readStart"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"1502"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" readValueType"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"float32"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Extract high or low byte of the 16-bit register as unsigned 8-bit integer (uint8)")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Thing")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("data")]),t._v(" input1502lo "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v(" readStart"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"1502.0"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" readValueType"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"uint8"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Thing")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("data")]),t._v(" input1502hi "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v(" readStart"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"1502.1"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" readValueType"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"uint8"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Extract individual bits of the 16-bit register")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// bit 0 is the least significant bit, and bit 15 is the most significant bit")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Thing")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("data")]),t._v(" input1502bit0 "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v(" readStart"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"1502.0"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" readValueType"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"bit"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Thing")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("data")]),t._v(" input1502bit1 "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v(" readStart"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"1502.1"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" readValueType"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"bit"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Thing")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("data")]),t._v(" input1502bit2 "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v(" readStart"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"1502.2"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" readValueType"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"bit"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// read-only for discrete inputs. Reading 4 discrete inputs, with index 1200, 1201, 1202, 1203.")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// These correspond to input register numbers 101201, 101202, 101203, 101204.")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Bridge")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("poller")]),t._v(" discreteInputs "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v(" start"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1200")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" length"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("refresh")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1000")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" type"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"discrete"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Thing")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("data")]),t._v(" di1200 "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v(" readStart"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"1200"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" readValueType"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"bit"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Thing")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("data")]),t._v(" di1201 "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v(" readStart"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"1201"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" readValueType"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"bit"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Write-only entry: thing is child of tcp directly. No readStart etc. need to be defined.")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Note that the openHAB state might differ from the physical slave since it is not refreshed at all")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Thing")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("data")]),t._v(" holding5write "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v(" writeStart"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"5"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" writeValueType"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"int16"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" writeType"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"holding"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("code",[this._v("items/modbus_ex1.items")]),this._v(":")])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("div",{staticClass:"language-xtend extra-class"},[s("pre",{pre:!0,attrs:{class:"language-dsl"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Switch")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("DO4")]),t._v("            "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Digital Output index 4 [%d]"')]),t._v("    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" channel"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"modbus:data:localhostTCP:coils:do4:switch"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Switch")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("DO5")]),t._v("            "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Digital Output index 5 [%d]"')]),t._v("    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" channel"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"modbus:data:localhostTCP:coils:do5:switch"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Contact")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("DI1200")]),t._v("            "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Digital Input index 1200 [%d]"')]),t._v("    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" channel"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"modbus:data:localhostTCP:discreteInputs:di1200:contact"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Contact")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("DI1201")]),t._v("            "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Digital Input index 1201 [%d]"')]),t._v("    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" channel"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"modbus:data:localhostTCP:discreteInputs:di1201:contact"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Number")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Input1500Float32")]),t._v("            "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Input registers 1500-1501 as float32 [%.1f]"')]),t._v("    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" channel"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"modbus:data:localhostTCP:inputRegisters:input1500:number"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Number")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Input1502Float32")]),t._v("            "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Input registers 1502-1503 as float32 [%.1f]"')]),t._v("    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" channel"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"modbus:data:localhostTCP:inputRegisters:input1502:number"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("DateTime")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Input1502Float32LastOKRead")]),t._v("            "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Input registers 1502-1503 last read [%1$tA, %1$td.%1$tm.%1$tY %1$tH:%1$tM:%1$tS]"')]),t._v("    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" channel"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"modbus:data:localhostTCP:inputRegisters:input1502:lastReadSuccess"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("DateTime")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Input1502Float32LastBadRead")]),t._v("            "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Input registers 1502-1503 last read [%1$tA, %1$td.%1$tm.%1$tY %1$tH:%1$tM:%1$tS]"')]),t._v("    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" channel"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"modbus:data:localhostTCP:inputRegisters:input1502:lastReadError"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Number")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Holding5writeonly")]),t._v("            "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Holding index 5 [%.1f]"')]),t._v("    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" channel"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"modbus:data:localhostTCP:holding5write:number"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("code",[this._v("sitemaps/modbus_ex1.sitemap")]),this._v(":")])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("div",{staticClass:"language-xtend extra-class"},[s("pre",{pre:!0,attrs:{class:"language-dsl"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("sitemap")]),t._v(" modbus_ex1 "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("label")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"modbus_ex1"')]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Frame")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Switch")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("item")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("DO4\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Switch")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("item")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("DO5\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Setpoint")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("item")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("Holding5writeonly "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("minValue")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("maxValue")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("step")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("20")]),t._v("\n\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Default")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("item")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("DI1200\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Default")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("item")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("DI1201\n\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Default")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("item")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("Input1500Float32\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Default")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("item")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("Input1502Float32\n\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Default")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("item")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("Input1500Float32LastOKRead\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Default")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("item")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("Input1500Float32LastBadRead\n\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"writing-to-different-address-and-type-than-read"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#writing-to-different-address-and-type-than-read","aria-hidden":"true"}},[this._v("#")]),this._v(" Writing To Different Address And Type Than Read")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("code",[this._v("things/modbus_ex2.things")]),this._v(":")])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("div",{staticClass:"language-xtend extra-class"},[s("pre",{pre:!0,attrs:{class:"language-dsl"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Bridge")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("modbus"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("tcp"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("localhostTCPex2")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v(" host"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"127.0.0.1"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" port"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("502")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Bridge")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("poller")]),t._v(" items "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v(" start"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" length"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("refresh")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1000")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" type"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"discrete"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// read from index 4, write to coil 5")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Thing")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("data")]),t._v(" readDiscrete4WriteCoil5 "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v(" readStart"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"4"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" readValueType"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"bit"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" writeStart"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"5"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" writeValueType"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"bit"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" writeType"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"coil"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Thing")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("data")]),t._v(" resetCoil5 "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v(" writeTransform"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"0"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" writeStart"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"5"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" writeValueType"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"bit"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" writeType"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"coil"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Thing")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("data")]),t._v(" setCoil5 "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v(" writeTransform"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"1"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" writeStart"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"5"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" writeValueType"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"bit"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" writeType"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"coil"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Bridge")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("poller")]),t._v(" coils "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v(" start"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" length"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("refresh")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("500")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" type"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"coil"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Thing")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("data")]),t._v(" index5 "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v(" readStart"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"5"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" readValueType"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"bit"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("code",[this._v("items/modbus_ex2.items")]),this._v(":")])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("div",{staticClass:"language-xtend extra-class"},[s("pre",{pre:!0,attrs:{class:"language-dsl"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Switch")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ReadDI4WriteDO5")]),t._v("            "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Coil 4/5 mix [%d]"')]),t._v("    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" channel"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"modbus:data:localhostTCPex2:items:readDiscrete4WriteCoil5:switch"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Switch")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ResetDO5")]),t._v("            "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Flip to turn Coil 5 OFF [%d]"')]),t._v("    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" channel"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"modbus:data:localhostTCPex2:items:resetCoil5:switch"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Switch")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("SetDO5")]),t._v("            "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Flip to turn Coil 5 ON [%d]"')]),t._v("    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" channel"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"modbus:data:localhostTCPex2:items:setCoil5:switch"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Contact")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Coil5")]),t._v("            "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Coil 5 [%d]"')]),t._v("    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" channel"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"modbus:data:localhostTCPex2:coils:index5:contact"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("code",[this._v("sitemaps/modbus_ex2.sitemap")]),this._v(":")])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("div",{staticClass:"language-xtend extra-class"},[s("pre",{pre:!0,attrs:{class:"language-dsl"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("sitemap")]),t._v(" modbus_ex2 "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("label")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"modbus_ex2"')]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Frame")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Switch")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("item")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("ReadDI4WriteDO5\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Switch")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("item")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("ResetDO5\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Switch")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("item")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("SetDO5\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Text")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("item")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("Coil5\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"scaling-example"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#scaling-example","aria-hidden":"true"}},[this._v("#")]),this._v(" Scaling Example")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("code",[this._v("things/modbus_ex_scaling.things")]),this._v(":")])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("div",{staticClass:"language-xtend extra-class"},[s("pre",{pre:!0,attrs:{class:"language-dsl"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Bridge")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("modbus"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("tcp"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("localhostTCP3")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v(" host"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"127.0.0.1"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" port"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("502")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Bridge")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("poller")]),t._v(" holdingPoller "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v(" start"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" length"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("refresh")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("5000")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" type"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"holding"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Thing")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("data")]),t._v(" holding5Scaled "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v(" readStart"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"5"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" readValueType"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"int16"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" readTransform"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"JS(divide10.js)"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" writeStart"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"5"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" writeValueType"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"int16"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" writeType"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"holding"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" writeTransform"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"JS(multiply10.js)"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("code",[this._v("items/modbus_ex_scaling.items")]),this._v(":")])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("div",{staticClass:"language-xtend extra-class"},[s("pre",{pre:!0,attrs:{class:"language-dsl"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Number")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Holding5Scaled")]),t._v("            "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Holding index 5 scaled [%.1f]"')]),t._v("   "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" channel"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"modbus:data:localhostTCP3:holdingPoller:holding5Scaled:number"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("code",[this._v("sitemaps/modbus_ex_scaling.sitemap")]),this._v(":")])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("div",{staticClass:"language-xtend extra-class"},[s("pre",{pre:!0,attrs:{class:"language-dsl"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("sitemap")]),t._v(" modbus_ex_scaling "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("label")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"modbus_ex_scaling"')]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Frame")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Text")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("item")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("Holding5Scaled\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Setpoint")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("item")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("Holding5Scaled "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("minValue")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("maxValue")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("step")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("20")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("See "),e("a",{attrs:{href:"#transformation-example-scaling"}},[this._v("transformation example")]),this._v(" for the "),e("code",[this._v("divide10.js")]),this._v(" and "),e("code",[this._v("multiply10.js")]),this._v(".")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"dimmer-example"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#dimmer-example","aria-hidden":"true"}},[this._v("#")]),this._v(" Dimmer Example")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("code",[this._v("things/modbus_ex_dimmer.things")]),this._v(":")])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("div",{staticClass:"language-xtend extra-class"},[s("pre",{pre:!0,attrs:{class:"language-dsl"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Bridge")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("modbus"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("tcp"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("remoteTCP")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v(" host"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"192.168.0.10"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" port"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("502")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n   "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Bridge")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("poller")]),t._v(" MBDimmer "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v(" start"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("4700")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" length"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("refresh")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1000")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" type"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"holding"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t         "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Thing")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("data")]),t._v(" DimmerReg "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v(" readStart"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"4700"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" readValueType"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"uint16"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" readTransform"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"JS(dimread255.js)"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" writeStart"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"4700"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" writeValueType"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"uint16"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" writeType"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"holding"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" writeTransform"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"JS(dimwrite255.js)"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n   "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("code",[this._v("items/modbus_ex_dimmer.items")]),this._v(":")])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("div",{staticClass:"language-xtend extra-class"},[s("pre",{pre:!0,attrs:{class:"language-dsl"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Dimmer")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("myDimmer")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"My Dimmer d2 [%.1f]"')]),t._v("   "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" channel"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"modbus:data:remoteTCP:MBDimmer:DimmerReg:dimmer"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("code",[this._v("sitemaps/modbus_ex_dimmer.sitemap")]),this._v(":")])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("div",{staticClass:"language-xtend extra-class"},[s("pre",{pre:!0,attrs:{class:"language-dsl"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("sitemap")]),t._v(" modbus_ex_dimmer "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("label")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"modbus_ex_dimmer"')]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Frame")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Switch")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("item")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("myDimmer\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Slider")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("item")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("myDimmer\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("code",[this._v("transform/dimread255.js")]),this._v(":")])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Wrap everything in a function (no global variable pollution)")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// variable "input" contains data string passed by binding')]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("inputData")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// here set the 100% equivalent register value")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("MAX_SCALE")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("255")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// convert to percent")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" Math"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("round")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("parseFloat")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("inputData"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("MAX_SCALE")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("input"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("code",[this._v("transform/dimwrite255.js")]),this._v(":")])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// variable "input" contains command string passed by openHAB')]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("inputData")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// here set the 100% equivalent register value")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("MAX_SCALE")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("255")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" out "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("inputData "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'ON'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n          "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// set max")]),t._v("\n         out "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("MAX_SCALE")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("inputData "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'OFF'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n         out "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n         "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// scale from percent")]),t._v("\n         out "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Math"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("round")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("parseFloat")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("inputData"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("MAX_SCALE")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" out\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("input"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"rollershutter-example"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#rollershutter-example","aria-hidden":"true"}},[this._v("#")]),this._v(" Rollershutter Example")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h4",{attrs:{id:"rollershutter"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#rollershutter","aria-hidden":"true"}},[this._v("#")]),this._v(" Rollershutter")])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("p",[t._v("Roller shutter position is read from register 0, "),s("code",[t._v("UP")]),t._v("/"),s("code",[t._v("DOWN")]),t._v(" commands are written to register 1, and "),s("code",[t._v("MOVE")]),t._v("/"),s("code",[t._v("STOP")]),t._v(" commands are written to register 2.")])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("table",[s("thead",[s("tr",[s("th",[t._v("Command")]),t._v(" "),s("th",[t._v("Number written to Modbus slave")]),t._v(" "),s("th",[t._v("Register index")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[s("code",[t._v("UP")])]),t._v(" "),s("td",[s("code",[t._v("1")])]),t._v(" "),s("td",[t._v("1")])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("DOWN")])]),t._v(" "),s("td",[s("code",[t._v("-1")])]),t._v(" "),s("td",[t._v("1")])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("MOVE")])]),t._v(" "),s("td",[s("code",[t._v("1")])]),t._v(" "),s("td",[t._v("2")])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("STOP")])]),t._v(" "),s("td",[s("code",[t._v("0")])]),t._v(" "),s("td",[t._v("2")])])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("code",[this._v("things/modbus_ex_rollershutter.things")]),this._v(":")])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("div",{staticClass:"language-xtend extra-class"},[s("pre",{pre:!0,attrs:{class:"language-dsl"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Bridge")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("modbus"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("tcp"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("localhostTCPRollerShutter")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v(" host"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"127.0.0.1"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" port"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("502")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Bridge")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("poller")]),t._v(" holding "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v(" start"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" length"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("refresh")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1000")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" type"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"holding"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Since we are using advanced transformation outputting JSON,")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// other write parameters (writeValueType, writeStart, writeType) can be omitted")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Thing")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("data")]),t._v(" rollershutterData "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v(" readStart"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"0"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" readValueType"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"int16"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" writeTransform"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"JS(rollershutter.js)"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// For diagnostics")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Thing")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("data")]),t._v(" rollershutterDebug0 "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v(" readStart"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"0"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" readValueType"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"int16"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" writeStart"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"0"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" writeValueType"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"int16"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" writeType"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"holding"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Thing")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("data")]),t._v(" rollershutterDebug1 "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v(" readStart"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"1"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" readValueType"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"int16"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Thing")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("data")]),t._v(" rollershutterDebug2 "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v(" readStart"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"2"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" readValueType"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"int16"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("code",[this._v("items/modbus_ex_rollershutter.items")]),this._v(":")])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("div",{staticClass:"language-xtend extra-class"},[s("pre",{pre:!0,attrs:{class:"language-dsl"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// We disable auto-update to make sure that rollershutter position is updated from the slave, not "automatically" via commands')]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Rollershutter")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("RollershutterItem")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Roller shutter position [%.1f]"')]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v(" <temperature>")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" autoupdate"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"false"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" channel"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"modbus:data:localhostTCPRollerShutter:holding:rollershutterData:rollershutter"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// For diagnostics")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Number")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("RollershutterItemDebug0")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Roller shutter Debug 0 [%d]"')]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v(" <temperature>")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" channel"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"modbus:data:localhostTCPRollerShutter:holding:rollershutterDebug0:number"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Number")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("RollershutterItemDebug1")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Roller shutter Debug 1 [%d]"')]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v(" <temperature>")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" channel"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"modbus:data:localhostTCPRollerShutter:holding:rollershutterDebug1:number"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Number")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("RollershutterItemDebug2")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Roller shutter Debug 2 [%d]"')]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v(" <temperature>")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" channel"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"modbus:data:localhostTCPRollerShutter:holding:rollershutterDebug2:number"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("code",[this._v("sitemaps/modbus_ex_rollershutter.sitemap")]),this._v(":")])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("div",{staticClass:"language-xtend extra-class"},[s("pre",{pre:!0,attrs:{class:"language-dsl"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("sitemap")]),t._v(" modbus_ex_rollershutter "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("label")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"modbus_ex_rollershutter"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Switch")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("item")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("RollershutterItem "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("label")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Roller shutter [(%d)]"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("mappings")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("UP"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"up"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" STOP"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"X"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" DOWN"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"down"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" MOVE"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"move"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// For diagnostics")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Setpoint")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("item")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("RollershutterItemDebug0 "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("minValue")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("maxValue")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("step")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("20")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Text")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("item")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("RollershutterItemDebug0\n    "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Text")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("item")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("RollershutterItemDebug1\n    "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Text")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("item")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("RollershutterItemDebug2\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("code",[this._v("transform/rollershutter.js")]),this._v(":")])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Wrap everything in a function")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// variable "input" contains data passed by openHAB')]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("cmd")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" cmdToValue "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"UP"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"DOWN"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"MOVE"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"STOP"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" cmdToAddress "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"UP"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"DOWN"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"MOVE"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"STOP"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" value "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" cmdToValue"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("cmd"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" address "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" cmdToAddress"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("cmd"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("value "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("undefined")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v(" address "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("undefined")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// unknown command, do not write anything")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"[]"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"["')]),t._v("\n              "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"{\\"functionCode\\": 6, \\"address\\":"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" address"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("toString")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('", \\"value\\": ["')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" value "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"] }"')]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"]"')]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("input"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"eager-updates-using-refresh"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#eager-updates-using-refresh","aria-hidden":"true"}},[this._v("#")]),this._v(" Eager Updates Using REFRESH")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("It is also possible to use "),e("code",[this._v("REFRESH")]),this._v(" command to ask the binding to update more frequently for a short while.")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("code",[this._v("rules/fast_refresh.rules")]),this._v(":")])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" org"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("eclipse"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("xtext"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("xbase"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("lib"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Procedures\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" org"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("eclipse"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("smarthome"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("core"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("types"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("RefreshType\n\nval Procedures$Procedure0 refreshData "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Refresh SetTemperature. In fact, all data things in the same poller are refreshed")]),t._v("\n    SetTemperature"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("sendCommand")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("RefreshType"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("REFRESH")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n\nrule "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Refresh modbus data quickly after changing settings"')]),t._v("\nwhen\n    Item VacationMode received command or\n    Item HeatingEnabled received command\nthen\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("receivedCommand "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" RefreshType"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("REFRESH")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Update more frequently for a short while, to get")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// refereshed data after the newly received command")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("refreshData")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("createTimer")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("now"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("plus")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" refreshData"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("createTimer")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("now"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("plus")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("200")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" refreshData"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("createTimer")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("now"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("plus")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("300")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" refreshData"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("createTimer")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("now"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("plus")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("500")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" refreshData"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\nend\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("Please be aware that "),e("code",[this._v("REFRESH")]),this._v(' commands are "throttled" (to be exact, responses are cached) with '),e("code",[this._v("poller")]),this._v(" parameter "),e("code",[this._v("cacheMillis")]),this._v(".")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"changes-from-modbus-1-x-binding"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#changes-from-modbus-1-x-binding","aria-hidden":"true"}},[this._v("#")]),this._v(" Changes From Modbus 1.x Binding")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"absolute-addresses-instead-of-relative"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#absolute-addresses-instead-of-relative","aria-hidden":"true"}},[this._v("#")]),this._v(" Absolute Addresses Instead Of Relative")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("Previous binding sometimes used absolute addresses ("),e("code",[this._v("modbus.cfg")]),this._v("), sometimes relative to polled data (items configuration).")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"register-and-bit-addressing"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#register-and-bit-addressing","aria-hidden":"true"}},[this._v("#")]),this._v(" Register And Bit Addressing")])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("p",[t._v("Now 32 bit value types refer start register address. For example "),s("code",[t._v('valueType="int32"')]),t._v(" with "),s("code",[t._v('start="3"')]),t._v(" refers to 32 bit integer in registers "),s("code",[t._v("3")]),t._v(" and "),s("code",[t._v("4")]),t._v(".")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("The old binding could not handle this case at all since it was assumed that the values were addressed differently.\nRead index of "),e("code",[this._v("3")]),this._v(" would refer to 32 bit integer in registers "),e("code",[this._v("3*2=6")]),this._v(" and "),e("code",[this._v("3*2+1=7")]),this._v(".\nIt was not possible to refer to 32 bit type starting at odd index.")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("Bits, and other <16 bit value types, inside registers are addressed using "),e("code",[this._v('start="X.Y"')]),this._v(" convention.\nThis is more explicit notation hopefully reduces the risk of misinterpretation.")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"polling-details"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#polling-details","aria-hidden":"true"}},[this._v("#")]),this._v(" Polling Details")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("Furthermore, once can disable polling altogether and trigger polling on-demand using "),e("code",[this._v("REFRESH")]),this._v(".")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"transformation-changes"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#transformation-changes","aria-hidden":"true"}},[this._v("#")]),this._v(" Transformation Changes")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("With the new binding the transformations get slightly different input. In polling, the transformation always receives number as input (see "),e("a",{attrs:{href:"#read-steps"}},[this._v("Read steps")]),this._v(").\nOld binding had converted the input based on item type.")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"trigger-removed"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#trigger-removed","aria-hidden":"true"}},[this._v("#")]),this._v(" Trigger Removed")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("The old binding had "),e("code",[this._v("trigger")]),this._v(" parameter in item configuration to react only to some openHAB commands, or to some polled states.\nThere is no trigger anymore but one can use transformations to accomplish the same thing. See "),e("a",{attrs:{href:"#transformations"}},[this._v("Transformations")]),this._v(" for examples.")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"support-for-32-64-bit-value-types-in-writing"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#support-for-32-64-bit-value-types-in-writing","aria-hidden":"true"}},[this._v("#")]),this._v(" Support For 32, 64 Bit Value Types In Writing")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"how-to-manually-migrate"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#how-to-manually-migrate","aria-hidden":"true"}},[this._v("#")]),this._v(" How to manually migrate")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("code",[this._v("modbus.cfg")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("    poll=500\n\n    tcp.slave1.connection=192.168.2.9:502\n    tcp.slave1.type=coil\n    tcp.slave1.start=12288\n    tcp.slave1.length=128\n    tcp.slave1.updateunchangeditems=false\n\n    tcp.slave2.connection=192.168.2.9:502\n    tcp.slave2.type=holding\n    tcp.slave2.start=12338\n    tcp.slave2.length=100\n    tcp.slave2.updateunchangeditems=false\n\n    tcp.slave3.connection=192.168.2.9:502\n    tcp.slave3.type=holding\n    tcp.slave3.start=12438\n    tcp.slave3.length=100\n    tcp.slave3.updateunchangeditems=false\n\n    tcp.slave4.connection=192.168.2.9:502\n    tcp.slave4.type=holding\n    tcp.slave4.start=12538\n    tcp.slave4.length=100\n    tcp.slave4.updateunchangeditems=false\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("As you can see, all the slaves poll the same modbus device (actually a Wago 750-841 controller).\nWe now have to create "),e("code",[this._v("Things")]),this._v(" for this slaves.")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("The 2.x modbus binding uses a three-level definition.\nLevel one defines a "),e("code",[this._v("Bridge")]),this._v(" for every modbus device that is to be addressed.\nThe 1.x configuration in this example only addresses one device, so there will be one top level bridge.")])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-dsl"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Bridge")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("modbus"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("tcp"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("wago")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v(" host"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"192.168.2.9"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" port"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("502")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("p",[t._v("Within the top level "),s("code",[t._v("Bridge")]),t._v(" there are one or more second level bridges that replace the former "),s("code",[t._v("slave")]),t._v(" configurations.\nThe poll frequency can now be set per "),s("code",[t._v("poller")]),t._v(", so you may want to define different poll cycles up to your needs.\nThe slave "),s("code",[t._v("Bridge")]),t._v(" configs go inside the top level config.\nFor the four "),s("code",[t._v("poller")]),t._v("s defined in this example the 2.x configuration looks like this:")])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-dsl"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Bridge")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("modbus"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("tcp"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("wago")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v(" host"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"192.168.2.9"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" port"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("502")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" id"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Bridge")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("poller")]),t._v(" wago_slave1 "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v(" start"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("12288")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" length"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("128")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("refresh")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("500")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" type"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"coil"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Bridge")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("poller")]),t._v(" wago_slave2 "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v(" start"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("12338")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" length"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("refresh")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("4000")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" type"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"holding"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Bridge")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("poller")]),t._v(" wago_slave3 "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v(" start"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("12438")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" length"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("refresh")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("5000")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" type"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"holding"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Bridge")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("poller")]),t._v(" wago_slave4 "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v(" start"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("12538")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" length"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("refresh")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10000")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" type"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"holding"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("p",[t._v("The third (and most complex) part is the definition of data "),s("code",[t._v("Thing")]),t._v(" objects for every "),s("code",[t._v("Item")]),t._v(" bound to modbus.\nThis definitions go into the corresponding 2nd level "),s("code",[t._v("Bridge")]),t._v(" definitions.\nHere it is especially important that the modbus binding now uses absolute addresses all over the place, while the addresses in the item definition for the 1.x binding were relative to the start address of the slave definition before.\nFor less work in the following final step, the update of the "),s("code",[t._v("Item")]),t._v(" configuration, the naming of the "),s("code",[t._v("data")]),t._v(" things in this example uses the offset of the modbus value within the "),s("code",[t._v("poller")]),t._v(" as suffix, starting with 0(!).\nSee below for details.")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("The first Item polled with the first "),e("code",[this._v("poller")]),this._v(" used this configuration (with offset 0):")])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-dsl"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Switch")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("FooSwitch")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Foo Switch"')]),t._v("  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("modbus"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"slave1:0"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" \n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("Now we have to define a "),e("code",[this._v("Thing")]),this._v(" that can later be bound to that Item.")])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("p",[t._v("The "),s("code",[t._v("slave1")]),t._v(" "),s("code",[t._v("poller")]),t._v(" uses "),s("code",[t._v("12288")]),t._v(" as start address.\nSo we define the first data Thing within the "),s("code",[t._v("poller")]),t._v(" "),s("code",[t._v("wago_slave1")]),t._v(" with this address and choose a name that ends with "),s("code",[t._v("0")]),t._v(":")])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-dsl"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Thing")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("data")]),t._v(" wago_s1_000 "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v(" readStart"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"12288"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" readValueType"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"bit"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" writeStart"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"12288"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" writeValueType"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"bit"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" writeType"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"coil"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("The second Item of the 1.x binding (offset "),e("code",[this._v("1")]),this._v(") is defined as follows.")])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-dsl"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Switch")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("BarSwitch")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Bar Switch"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("modbus"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"slave1:1"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-dsl"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Thing")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("data")]),t._v(" wago_s1_001 "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v(" readStart"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"12289"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" readValueType"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"bit"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" writeStart"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"12289"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" writeValueType"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"bit"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" writeType"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"coil"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("Note the absolute address "),e("code",[this._v("12289")]),this._v(" (12288+1) which has to be used here.")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("code",[this._v("wago.things")]),this._v(":")])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-dsl"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Bridge")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("modbus"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("tcp"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("wago")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v(" host"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"192.168.2.9"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" port"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("502")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" id"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Bridge")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("poller")]),t._v(" wago_slave1 "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v(" start"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("12288")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" length"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("128")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("refresh")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("500")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" type"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"coil"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Thing")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("data")]),t._v(" wago_s1_000 "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v(" readStart"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"12288"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" readValueType"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"bit"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" writeStart"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"12288"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" writeValueType"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"bit"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" writeType"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"coil"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Thing")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("data")]),t._v(" wago_s1_001 "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v(" readStart"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"12289"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" readValueType"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"bit"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" writeStart"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"12289"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" writeValueType"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"bit"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" writeType"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"coil"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Bridge")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("poller")]),t._v(" wago_slave2 "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v(" start"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("12338")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" length"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("refresh")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("4000")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" type"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"holding"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Bridge")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("poller")]),t._v(" wago_slave3 "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v(" start"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("12438")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" length"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("refresh")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("5000")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" type"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"holding"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Bridge")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("poller")]),t._v(" wago_slave4 "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v(" start"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("12538")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" length"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("refresh")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10000")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" type"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"holding"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("p",[t._v("Save this in the "),s("code",[t._v("things")]),t._v(" subdirectory of your openHAB 2 config.\nWatch the file "),s("code",[t._v("events.log")]),t._v(" as it lists your new added "),s("code",[t._v("data")]),t._v(" "),s("code",[t._v("Things")]),t._v(".\nGiven that there are no config errors, they quickly change from "),s("code",[t._v("INITIALIZING")]),t._v(" to "),s("code",[t._v("ONLINE")]),t._v(".")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("Finally the Item definition has to be changed to refer to the new created "),e("code",[this._v("data")]),this._v(" "),e("code",[this._v("Thing")]),this._v(".\nYou can copy the names you need for this directly from the "),e("code",[this._v("events.log")]),this._v(" file:")])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-dsl"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Switch")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("FooSwitch")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Foo Switch"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("modbus"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"slave1:0"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" \n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Switch")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("BarSwitch")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Bar Switch"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("modbus"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"slave1:1"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-dsl"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Switch")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("FooSwitch")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Foo Switch"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("channel"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"modbus:data:wago:wago_slave1:wago_s1_000:switch"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" autopudate"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"false"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" \n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Switch")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("BarSwitch")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Bar Switch"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("channel"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"modbus:data:wago:wago_slave1:wago_s1_001:switch"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" autoupdate"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"false"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("code",[this._v('{modbus="slave1:')])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("code",[this._v('{channel="modbus:data:wago:wago_slave1:wago_s1_00')])])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("p",[t._v("in all lines which used single digits for the address in the 1.x config.\nInstead of "),s("code",[t._v("wago")]),t._v(", "),s("code",[t._v("wago_slave1")]),t._v(" and "),s("code",[t._v("wago_s1_00")]),t._v(" you have to use the names you have chosen for your "),s("code",[t._v("Bridge")]),t._v(", "),s("code",[t._v("poller")]),t._v(" and "),s("code",[t._v("data")]),t._v(" things.\nSimilar expressions are to be used for two-digit and three-digit relative addresses.")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("code",[this._v('"}')])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("code",[this._v(':switch"}')])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("The definition of "),e("code",[this._v("autoupdate")]),this._v(" is optional; please refer to "),e("a",{attrs:{href:"#autoupdate-parameter-with-items"}},[e("code",[this._v("autoupdate")])]),this._v(" to check whether you need it or not.")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("Continue to add "),e("code",[this._v("data")]),this._v(" "),e("code",[this._v("Thing")]),this._v("s for all your other Items the same way and link them to your Items.")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"troubleshooting"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#troubleshooting","aria-hidden":"true"}},[this._v("#")]),this._v(" Troubleshooting")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"thing-status"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#thing-status","aria-hidden":"true"}},[this._v("#")]),this._v(" Thing Status")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"enable-verbose-logging"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#enable-verbose-logging","aria-hidden":"true"}},[this._v("#")]),this._v(" Enable Verbose Logging")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("Enable "),e("code",[this._v("DEBUG")]),this._v(" or "),e("code",[this._v("TRACE")]),this._v(" (even more verbose) logging for the loggers named:")])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[e("code",[this._v("org.openhab.binding.modbus")])]),this._v(" "),e("li",[e("code",[this._v("org.openhab.io.transport.modbus")])]),this._v(" "),e("li",[e("code",[this._v("net.wimpi.modbus")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"for-developers"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#for-developers","aria-hidden":"true"}},[this._v("#")]),this._v(" For Developers")])}],!1,null,null,null);e.default=n.exports}}]);