(window.webpackJsonp=window.webpackJsonp||[]).push([[406],{975:function(t,e,s){"use strict";s.r(e);var a=s(0),n=Object(a.a)({},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("div",{staticClass:"content"},[t._m(0),t._v(" "),s("AddonLogo"),t._v(" "),s("p",[t._v("This is an openHAB binding for Tellstick devices produced by Telldus, a Swedish company based in Lund.")]),t._v(" "),s("p",[t._v('The original Tellstick focused on controlling 433 MHz devices like switches, dimmers and reading sensors from different brands.\nMany of the supported devices are cheaper and "low-end" and support have been made by reverse engineer the transmission protocols.\nAll of these 433 MHz devices is one-way, so some versions of the Tellstick monitoring the air to keep the state of all devices.')]),t._v(" "),s("p",[t._v("The latest versions have also implemented Z-Wave as transmission protocol which open up for more robust transmission due two-ways communication.")]),t._v(" "),t._m(1),t._v(" "),t._m(2),t._v(" "),s("p",[t._v("This binding supports the following thing types:")]),t._v(" "),t._m(3),t._v(" "),s("p",[t._v("Additionally the binding have two types of bridge things which correspond to available API types:")]),t._v(" "),t._m(4),t._v(" "),t._m(5),t._v(" "),t._m(6),t._v(" "),t._m(7),t._v(" "),t._m(8),t._v(" "),t._m(9),t._v(" "),t._m(10),t._v(" "),s("p",[t._v("The binding itself requires no configuration.")]),t._v(" "),t._m(11),t._v(" "),t._m(12),t._v(" "),t._m(13),t._v(" "),t._m(14),t._v(" "),t._m(15),t._v(" "),t._m(16),t._v(" "),s("blockquote",[s("p",[t._v("Not implemented yet but supported by some new devices, contributions are welcome. "),s("a",{attrs:{href:"https://api.telldus.net/localapi/api.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("API documention."),s("OutboundLink")],1),t._v(" "),s("br"),t._v(" "),s("strong",[t._v("3)")]),t._v(" "),s("em",[t._v("Local Rest API")]),t._v(" is a local API which would work similar to Telldus Live but local.")])]),t._v(" "),s("p",[t._v("Depending on your Tellstick model, different bridge-types are available:")]),t._v(" "),t._m(17),t._v(" "),t._m(18),t._v(" "),t._m(19),t._v(" "),t._m(20),t._v(" "),t._m(21),s("p",[t._v("Optional:")]),t._v(" "),t._m(22),t._v(" "),t._m(23),t._v(" "),s("p",[t._v("To configure Telldus Live you have request OAuth tokens from Telldus.\nGoto this page "),s("a",{attrs:{href:"https://api.telldus.com/keys/index",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://api.telldus.com/keys/index"),s("OutboundLink")],1),t._v(" and request your keys and update the config.")]),t._v(" "),t._m(24),s("p",[t._v("Required:")]),t._v(" "),t._m(25),t._v(" "),s("p",[t._v("Optional:")]),t._v(" "),t._m(26),t._v(" "),t._m(27),t._v(" "),s("p",[t._v("Actuators (dimmer/switch) support the following channels:")]),t._v(" "),t._m(28),t._v(" "),s("p",[t._v("Sensors (sensor) support the following channels:")]),t._v(" "),t._m(29),t._v(" "),s("p",[t._v("PowerSensors ([powersensor]) support the following channels:")]),t._v(" "),t._m(30),t._v(" "),s("p",[t._v("WindSensors ([windsensor]) support the following channels:")]),t._v(" "),t._m(31),t._v(" "),s("p",[t._v("RainSensors ([rainsensor]) support the following channels:")]),t._v(" "),t._m(32),t._v(" "),t._m(33),t._v(" "),t._m(34),t._v(" "),s("p",[t._v("First create another proxy item for every sensor:")]),t._v(" "),t._m(35),s("p",[t._v("Then create a rule which updates the proxy item:")]),t._v(" "),t._m(36),t._m(37),t._v(" "),t._m(38),t._v(" "),t._m(39),t._m(40),t._v(" "),t._m(41),s("DocPreviousVersions"),t._v(" "),s("EditPageLink")],1)},[function(){var t=this.$createElement,e=this._self._c||t;return e("h1",{attrs:{id:"tellstick-binding"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#tellstick-binding","aria-hidden":"true"}},[this._v("#")]),this._v(" Tellstick Binding")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",{attrs:{align:"center"}},[e("img",{attrs:{src:"doc/tellstick_duo.jpg",alt:"Tellstick Duo with device",width:"300px"}})])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"supported-things"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#supported-things","aria-hidden":"true"}},[this._v("#")]),this._v(" Supported Things")])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("ul",[s("li",[s("em",[t._v("Dimmable Device")]),t._v(" - Usually for controlling lamps.  "),s("code",[t._v("dimmer")])]),t._v(" "),s("li",[s("em",[t._v("Switchable Device")]),t._v(" - On/Off only could be lamps or other electronic equipment. "),s("code",[t._v("switch")])]),t._v(" "),s("li",[s("em",[t._v("Sensors")]),t._v(" - Temperature- and humidity-sensors. "),s("code",[t._v("sensor")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[e("em",[this._v("Telldus Core Bridge")]),this._v(" - Oldest API, used by USB devices. "),e("code",[this._v("telldus-core")])]),this._v(" "),e("li",[e("em",[this._v("Telldus Live Bridge")]),this._v(" - Telldus Cloud service, all devices with online access. "),e("code",[this._v("telldus-live")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("em",[e("strong",[this._v("Switchbased sensors workaround")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[this._v("Some 433MHz magnetic & PIR sensors, for example, magnetic door sensors, are detected as regular "),e("code",[this._v("switch")]),this._v(" Things instead of type "),e("code",[this._v("contact")]),this._v(". There is technically no way of distinguish them apart from regulur "),e("code",[this._v("switch")]),this._v(" Things. For using them as sensors only (not paired to a lamp) please consult the workaround in the channel section.")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"discovery"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#discovery","aria-hidden":"true"}},[this._v("#")]),this._v(" Discovery")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("Devices which is added to "),e("em",[this._v("Telldus Core")]),this._v(" and "),e("em",[this._v("Telldus Live")]),this._v(" can be discovered by openHAB.")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("When you add this binding it will try to discover the "),e("em",[this._v("Telldus Core Bridge")]),this._v(".\nIf it is installed correct its devices will show up.\nIf you want to use the "),e("em",[this._v("Telldus Live")]),this._v(" its bridge, "),e("em",[this._v("Telldus Live bridge")]),this._v(" need to be added manually.")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"binding-configuration"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#binding-configuration","aria-hidden":"true"}},[this._v("#")]),this._v(" Binding Configuration")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"thing-configuration"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#thing-configuration","aria-hidden":"true"}},[this._v("#")]),this._v(" Thing Configuration")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("Only the bridges require manual configuration.\nIt is preferable that devices and sensors are discovered automatically; let the discovery/inbox initially configure them.\nYou can add them either with karaf: "),e("code",[this._v("inbox approve <thingId>")]),this._v(" or by using the inbox of the Paper UI.")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"dimmers-switches"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#dimmers-switches","aria-hidden":"true"}},[this._v("#")]),this._v(" Dimmers & switches")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("There is an option to override the resend count of the commands.\nUse the option "),e("code",[this._v("repeat")]),this._v(" for that. Default resend count is 2.")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"bridges"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#bridges","aria-hidden":"true"}},[this._v("#")]),this._v(" Bridges")])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("p",[t._v("Depending on your tellstick device type there is different ways of using this binding.\nThe binding implements two different API:\n"),s("strong",[t._v("1)")]),t._v(" "),s("em",[t._v("Telldus Core")]),t._v(" which is a local only interface supported by USB based device. "),s("br"),t._v(" "),s("strong",[t._v("2)")]),t._v(" "),s("em",[t._v("Telldus Live")]),t._v(" which is a REST based cloud service maintained by Telldus. "),s("br")])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("table",[s("thead",[s("tr",[s("th",[t._v("Model")]),t._v(" "),s("th",{staticStyle:{"text-align":"center"}},[t._v("Telldus Core")]),t._v(" "),s("th",{staticStyle:{"text-align":"center"}},[t._v("Telldus Live")]),t._v(" "),s("th",{staticStyle:{"text-align":"center"}},[t._v("Local REST API")]),t._v(" "),s("th",{staticStyle:{"text-align":"center"}},[t._v("Verified working with openHAB")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("Tellstick Basic")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("X")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("X")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}}),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("X")])]),t._v(" "),s("tr",[s("td",[t._v("Tellstick Duo")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("X")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("X")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}}),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("X")])]),t._v(" "),s("tr",[s("td",[t._v("Tellstick Net v.1")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}}),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("X")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}}),t._v(" "),s("td",{staticStyle:{"text-align":"center"}})]),t._v(" "),s("tr",[s("td",[t._v("Tellstick Net v.2")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}}),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("X")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("X")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}})]),t._v(" "),s("tr",[s("td",[t._v("Tellstick ZNet Lite v.1")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}}),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("X")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("X")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("X")])]),t._v(" "),s("tr",[s("td",[t._v("Tellstick ZNet Lite v.2")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}}),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("X")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("X")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}})])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h4",{attrs:{id:"telldus-core-bridge"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#telldus-core-bridge","aria-hidden":"true"}},[this._v("#")]),this._v(" Telldus Core Bridge")])},function(){var t=this.$createElement,e=this._self._c||t;return e("blockquote",[e("p",[this._v("To enable communication between openhab and tellstick-core service (Telldus center) they must use same architecture, eg. 32-bit or 64-bit. The supplied version from Telldus is compiled against 32-bit architecture. Therefore, it is better to use 32-bit java for openHAB. To check which version of Java is currently in use, run: "),e("code",[this._v("java -d32 -version")])]),this._v(" "),e("p",[e("em",[this._v("For changing architecture in Linux check out: "),e("code",[this._v("dpkg --add-architecture")])])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("The telldus-core bridge uses a library on the local computer which is a "),e("code",[this._v(".dll")]),this._v(" file for Windows and a "),e("code",[this._v(".so")]),this._v(" file for Linux. The default one is usually correct.")])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-dsl"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Bridge")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("tellstick"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("telldus")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("core"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Tellstick Duo"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("resendInterval"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("200")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("libraryPath"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"C:/Program Files/Telldus/;C:/Program Files (x86)/Telldus/"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[e("strong",[this._v("libraryPath:")]),this._v(" The path to tellduscore.dll/so semicolon seperated list of folders.")]),this._v(" "),e("li",[e("strong",[this._v("resendInterval:")]),this._v(" The interval between each transmission of command in ms, default 100ms.")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h4",{attrs:{id:"telldus-live-bridge"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#telldus-live-bridge","aria-hidden":"true"}},[this._v("#")]),this._v(" Telldus Live Bridge")])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-dsl"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Bridge")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("tellstick"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("telldus")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("live"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Tellstick ZWave"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("publicKey"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"XXX"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" privateKey"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"YYYY"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" token"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"ZZZZ"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" tokenSecret"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"UUUU"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])])])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("ul",[s("li",[s("strong",[t._v("privateKey:")]),t._v(" Private key")]),t._v(" "),s("li",[s("strong",[t._v("publicKey:")]),t._v(" Public key")]),t._v(" "),s("li",[s("strong",[t._v("token:")]),t._v(" Token")]),t._v(" "),s("li",[s("strong",[t._v("tokenSecret:")]),t._v(" Token secret")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[e("strong",[this._v("refreshInterval:")]),this._v(" How often we should contact "),e("em",[this._v("Telldus Live")]),this._v(" to check for updates (in ms)")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"channels"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#channels","aria-hidden":"true"}},[this._v("#")]),this._v(" Channels")])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("table",[s("thead",[s("tr",[s("th",[t._v("Channel Type ID")]),t._v(" "),s("th",[t._v("Item Type")]),t._v(" "),s("th",[t._v("Description")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("dimmer")]),t._v(" "),s("td",[t._v("Number")]),t._v(" "),s("td",[t._v("This channel indicates the current dim level")])]),t._v(" "),s("tr",[s("td",[t._v("state")]),t._v(" "),s("td",[t._v("Switch")]),t._v(" "),s("td",[t._v("This channel indicates whether a device is turned on or off.")])]),t._v(" "),s("tr",[s("td",[t._v("timestamp")]),t._v(" "),s("td",[t._v("DateTime")]),t._v(" "),s("td",[t._v("This channel reports the last time this device state changed.")])])])])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("table",[s("thead",[s("tr",[s("th",[t._v("Channel Type ID")]),t._v(" "),s("th",[t._v("Item Type")]),t._v(" "),s("th",[t._v("Description")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("humidity")]),t._v(" "),s("td",[t._v("Number")]),t._v(" "),s("td",[t._v("This channel reports the current humidity in percentage.")])]),t._v(" "),s("tr",[s("td",[t._v("temperature")]),t._v(" "),s("td",[t._v("Number")]),t._v(" "),s("td",[t._v("This channel reports the current temperature in celsius.")])]),t._v(" "),s("tr",[s("td",[t._v("timestamp")]),t._v(" "),s("td",[t._v("DateTime")]),t._v(" "),s("td",[t._v("This channel reports the last time this sensor was updates.")])])])])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("table",[s("thead",[s("tr",[s("th",[t._v("Channel Type ID")]),t._v(" "),s("th",[t._v("Item Type")]),t._v(" "),s("th",[t._v("Description")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("watt")]),t._v(" "),s("td",[t._v("Number")]),t._v(" "),s("td",[t._v("This channel reports the current watt.")])]),t._v(" "),s("tr",[s("td",[t._v("ampere")]),t._v(" "),s("td",[t._v("Number")]),t._v(" "),s("td",[t._v("This channel reports the current ampere.")])]),t._v(" "),s("tr",[s("td",[t._v("timestamp")]),t._v(" "),s("td",[t._v("DateTime")]),t._v(" "),s("td",[t._v("This channel reports the last time this sensor was updates.")])])])])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("table",[s("thead",[s("tr",[s("th",[t._v("Channel Type ID")]),t._v(" "),s("th",[t._v("Item Type")]),t._v(" "),s("th",[t._v("Description")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("windgust")]),t._v(" "),s("td",[t._v("Number")]),t._v(" "),s("td",[t._v("This current peak wind gust.")])]),t._v(" "),s("tr",[s("td",[t._v("winddirection")]),t._v(" "),s("td",[t._v("Number")]),t._v(" "),s("td",[t._v("The current wind direction.")])]),t._v(" "),s("tr",[s("td",[t._v("windaverage")]),t._v(" "),s("td",[t._v("DateTime")]),t._v(" "),s("td",[t._v("The current wind avarage.")])])])])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("table",[s("thead",[s("tr",[s("th",[t._v("Channel Type ID")]),t._v(" "),s("th",[t._v("Item Type")]),t._v(" "),s("th",[t._v("Description")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("rainrate")]),t._v(" "),s("td",[t._v("Number")]),t._v(" "),s("td",[t._v("This current rate of rain.")])]),t._v(" "),s("tr",[s("td",[t._v("raintotal")]),t._v(" "),s("td",[t._v("Number")]),t._v(" "),s("td",[t._v("The total rain.")])])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"switchbased-sensor-workaround"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#switchbased-sensor-workaround","aria-hidden":"true"}},[this._v("#")]),this._v(" Switchbased sensor workaround")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("All switchbased sensors are binary and the goal is to represent them as a "),e("code",[this._v("contact")]),this._v(" item in openHAB. Eg. a door is open or closed and can't be altered by sending a radio signal.\nTo achive that we will create a proxy item which is updated by a rule.")])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-dsl"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Switch")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("front_door_sensor")]),t._v("\t"),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Front door"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v(" <door>")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("channel"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"tellstick:switch:1:7:state"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Contact")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("front_door_proxy")]),t._v("\t"),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Front door"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v(" <door>")]),t._v("\n")])])])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-rules"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("rule")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"proxy_front_door_on"')]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("when")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Item")]),t._v(" front_door_sensor "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("changed")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("to")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("ON")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("then")]),t._v("\n\tfront_door_proxy"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("postUpdate")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("OPEN")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t\t\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("end")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("rule")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"proxy_front_door_off"')]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("when")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Item")]),t._v(" front_door_sensor "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("changed")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("to")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("OFF")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("then")]),t._v("\n\tfront_door_proxy"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("postUpdate")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("CLOSED")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t\t\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("end")]),t._v("\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"full-example"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#full-example","aria-hidden":"true"}},[this._v("#")]),this._v(" Full Example")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"tellstick-things"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#tellstick-things","aria-hidden":"true"}},[this._v("#")]),this._v(" tellstick.things")])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-dsl"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Bridge")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("tellstick"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("telldus")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("core"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Tellstick Duo"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("resendInterval"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("200")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\tdimmer "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("BedroomCeilingLamp1")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("protocol"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"arctech"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("model"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"selflearning-dimmer"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("name"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"BedroomCeilingLamp1"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("deviceId"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"8"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n    switch "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("LivingTV")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("protocol"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"arctech"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("name"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"LivingTV"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("deviceId"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"5"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n    sensor OutsideSensor1 "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("protocol"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"fineoffset"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("model"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"temperaturehumidity"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("name"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"temperaturehumidity:125"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("deviceId"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"125_temperaturehumidity_fineoffset"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Bridge")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("tellstick"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("telldus")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("live"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Tellstick ZWave"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("refreshInterval"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10000")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" publicKey"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"XXXXXXXX"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" privateKey"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"YYYYYY"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" token"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"ZZZZZZZZ"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" tokenSecret"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"UUUUUUUUUU"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\tsensor OutsideSensor2 "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("protocol"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"fineoffset"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("model"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"temperaturehumidity"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("name"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"temperaturehumidity:120"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("deviceId"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"120_temperaturehumidity_fineoffset"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"tellstick-items"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#tellstick-items","aria-hidden":"true"}},[this._v("#")]),this._v(" tellstick.items")])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-dsl"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Number")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("OutsideSensor1_Temperture")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v(" <temperature>")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" channel"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"tellstick:sensor:tellstickgateway:OutsideSensor1:temperature"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Number")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("OutsideSensor1_Humidity")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v(" <humidity>")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" channel"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"tellstick:sensor:tellstickgateway:OutsideSensor1:humidity"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Switch")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("LivingTV_Power")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v(" <screen>")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" channel"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"tellstick:switch:tellstickgateway:LivingTV:switch"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Dimmer")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("BedroomCeilingLamp1_Brightness")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v(" <lightbulb>")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" channel"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"tellstick:dimmer:tellstickgateway:BedroomCeilingLamp1:dimmer"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])}],!1,null,null,null);e.default=n.exports}}]);