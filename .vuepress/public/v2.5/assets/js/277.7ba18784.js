(window.webpackJsonp=window.webpackJsonp||[]).push([[277],{856:function(t,e,s){"use strict";s.r(e);var n=s(0),a=Object(n.a)({},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("div",{staticClass:"content"},[s("h1",{attrs:{id:"mochad-x10-binding"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#mochad-x10-binding","aria-hidden":"true"}},[t._v("#")]),t._v(" Mochad X10 Binding "),s("Badge",{attrs:{type:"warn",text:"v1"}})],1),t._v(" "),s("p",[t._v("This binding makes it possible to control X10 devices via a server running the "),s("a",{attrs:{href:"http://sourceforge.net/projects/mochad/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Mochad X10 daemon by mmauka"),s("OutboundLink")],1),t._v(". Mochad is a Linux TCP gateway daemon for the X10 CM15A RF (radio frequency) and PL (power line) controller and the CM19A RF controller.")]),t._v(" "),s("p",[t._v("With the current version of the binding items of type Switch, Dimmer, and Rollershutter can be controlled. The binding only uses one-way communication so no status reading (yet).")]),t._v(" "),t._m(0),t._v(" "),t._m(1),t._v(" "),t._m(2),t._v(" "),t._m(3),t._v(" "),s("p",[t._v("The format of the binding configuration is simple and looks like this:")]),t._v(" "),t._m(4),t._m(5),t._v(" "),s("p",[t._v("Addressing of X10 devices is done using a so called house code and a unit code. The house code is specified by characters 'a' to 'p'. The unit code is a number from 1 to 16. This way a number of 255 X10 devices can be controlled by one X10 controller.")]),t._v(" "),t._m(6),t._v(" "),t._m(7),t._v(" "),t._m(8),t._v(" "),s("p",[t._v("Here are some examples of valid binding configuration strings, as defined in the items configuration file:")]),t._v(" "),t._m(9),s("DocPreviousVersions"),t._v(" "),s("EditPageLink")],1)},[function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"binding-configuration"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#binding-configuration","aria-hidden":"true"}},[this._v("#")]),this._v(" Binding Configuration")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("This binding can be configured in the file "),e("code",[this._v("services/mochadx10.cfg")]),this._v(".")])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("table",[s("thead",[s("tr",[s("th",[t._v("Property")]),t._v(" "),s("th",[t._v("Default")]),t._v(" "),s("th",{staticStyle:{"text-align":"center"}},[t._v("Required")]),t._v(" "),s("th",[t._v("Description")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("hostIp")]),t._v(" "),s("td"),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("Yes")]),t._v(" "),s("td",[t._v("the IP address of the server on which the Mochad X10 daemon is running.")])]),t._v(" "),s("tr",[s("td",[t._v("hostPort")]),t._v(" "),s("td",[t._v("1099")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("No")]),t._v(" "),s("td",[t._v("the port number on which the Mochad X10 daemon is communicating.")])])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"item-configuration"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#item-configuration","aria-hidden":"true"}},[this._v("#")]),this._v(" Item configuration")])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v('mochadx10="<houseCode><unitCode>[:<transmitMethod>][:<dimMethod>]"\n')])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("where parts in "),e("code",[this._v("[brackets]")]),this._v(" indicate optional components.")])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("p",[t._v("X10 devices can be controlled by sending commands over the power-line or by sending RF commands. To explicitly specify the "),s("code",[t._v("transmitMethod")]),t._v(" a value of "),s("code",[t._v("pl")]),t._v(" for power-line or "),s("code",[t._v("rf")]),t._v(" for radio frequency can be used. If "),s("code",[t._v("transmitMethod")]),t._v(" is not specified it defaults to "),s("code",[t._v("pl")]),t._v(".")])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("p",[t._v("X10 dimmer devices can use one the "),s("code",[t._v("dim/bright")]),t._v(" commands or the "),s("code",[t._v("xdim")]),t._v(" command to set the level of lighting. To explicitly specify the "),s("code",[t._v("dimMethod")]),t._v(" of an X10 device, set it to "),s("code",[t._v("dim")]),t._v(" for using the 'dim/bright' commands, or to "),s("code",[t._v("xdim")]),t._v(" for using the "),s("code",[t._v("xdim")]),t._v(" command. If "),s("code",[t._v("dimMethod")]),t._v(" is not specified it defaults to "),s("code",[t._v("xdim")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"examples"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#examples","aria-hidden":"true"}},[this._v("#")]),this._v(" Examples")])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-dsl"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Dimmer")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Light_Corridor_Dimmer")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Hallway Dimmer [%d %%]"')]),s("span",{pre:!0,attrs:{class:"token tag"}},[t._v(" (GF_Corridor)")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("mochadx10"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"a1"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Dimmer")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Light_Living_Dimmer")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Living Dimmer [%d %%]"')]),s("span",{pre:!0,attrs:{class:"token tag"}},[t._v(" (GF_Living)")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("mochadx10"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"a2:pl:dim"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Switch")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Mech_Vent")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Mechanical ventilation"')]),s("span",{pre:!0,attrs:{class:"token tag"}},[t._v(" (GF_Kitchen)")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("mochadx10"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"b12"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Rollershutter")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Bedroom"')]),s("span",{pre:!0,attrs:{class:"token tag"}},[t._v(" (FF_Bedroom)")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("mochadx10"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"m3:rf"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])}],!1,null,null,null);e.default=a.exports}}]);