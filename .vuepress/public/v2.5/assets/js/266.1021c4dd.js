(window.webpackJsonp=window.webpackJsonp||[]).push([[266],{838:function(t,e,s){"use strict";s.r(e);var n=s(0),a=Object(n.a)({},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("div",{staticClass:"content"},[s("h1",{attrs:{id:"mcp3424-binding"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#mcp3424-binding","aria-hidden":"true"}},[t._v("#")]),t._v(" MCP3424 Binding "),s("Badge",{attrs:{type:"warn",text:"v1"}})],1),t._v(" "),s("p",[t._v("This binding provides native access for MCP3424 18-bit delta sigma ADC on I2C bus. Please consider datasheet for IC for future information. The binding should work with MCP3422 and MCP3423 also, but was not tested due to lack of hardware.")]),t._v(" "),s("p",[t._v("This binding works nicely with openHAB 1.8.3 and 2.0.0 runtimes.")]),t._v(" "),t._m(0),t._v(" "),s("p",[t._v("No special configuration is needed.")]),t._v(" "),t._m(1),t._v(" "),s("p",[t._v("Since MCP3424 is ADC converter on I2C bus, only two types of items are supported:")]),t._v(" "),t._m(2),t._v(" "),t._m(3),s("p",[t._v("returns the raw conversion result on channel 0 (CH1 on datasheet) of the IC on address 0x6C")]),t._v(" "),t._m(4),s("p",[t._v("returns the conversion result in percent on channel 1 (CH2 on datasheet) of the IC on address 0x6C")]),t._v(" "),s("DocPreviousVersions"),t._v(" "),s("EditPageLink")],1)},[function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"binding-configuration"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#binding-configuration","aria-hidden":"true"}},[this._v("#")]),this._v(" Binding Configuration")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"item-configuration"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#item-configuration","aria-hidden":"true"}},[this._v("#")]),this._v(" Item Configuration")])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[e("code",[this._v("Number")]),this._v(" for raw conversion output and")]),this._v(" "),e("li",[e("code",[this._v("Dimmer")]),this._v(" for conversion output in percent. Percent value is calculated dependent on set resolution. Find the example below.")])])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-dsl"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Number")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Test1")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Test 1"')]),s("span",{pre:!0,attrs:{class:"token tag"}},[t._v(" (Tests)")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" mcp3424"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("\"{address:6C, pin:'CH0', gain:1, resolution:12}\"")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-dsl"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Dimmer")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Test2")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Test 2"')]),s("span",{pre:!0,attrs:{class:"token tag"}},[t._v(" (Tests)")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" mcp3424"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("\"{address:6C, pin:'CH1', gain:1, resolution:12}\"")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])}],!1,null,null,null);e.default=a.exports}}]);