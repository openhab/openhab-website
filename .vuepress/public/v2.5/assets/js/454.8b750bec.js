(window.webpackJsonp=window.webpackJsonp||[]).push([[454],{816:function(e,t,r){"use strict";r.r(t);var s=r(0),o=Object(s.a)({},function(){var e=this,t=e.$createElement,r=e._self._c||t;return r("div",{staticClass:"content"},[e._m(0),e._v(" "),r("p",[e._v('MQTT is a machine-to-machine (M2M)/"Internet of Things" connectivity protocol.\nIt was designed as an extremely lightweight publish/subscribe messaging transport.')]),e._v(" "),r("p",[e._v("To allow MQTT capable devices to communicate with each other you need a software called MQTT Broker.")]),e._v(" "),r("p",[e._v("You can either install one of the many MQTT Broker offerings like the free "),r("a",{attrs:{href:"https://mosquitto.org/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Mosquitto"),r("OutboundLink")],1),e._v(" broker or use this pre-configured "),r("a",{attrs:{href:"https://github.com/andsel/moquette",target:"_blank",rel:"noopener noreferrer"}},[e._v("Moquette"),r("OutboundLink")],1),e._v(" broker.")]),e._v(" "),r("p",[e._v("Check your Inbox after installation.")]),e._v(" "),e._m(1),e._v(" "),r("p",[e._v("All parameters are optional and can be set by file or the REST interface (user-interfaces).")]),e._v(" "),e._m(2),e._v(" "),e._m(3),e._v(" "),r("p",[e._v("The keystore that is included to allow to start a TLS encrypted connection is generated by:")]),e._v(" "),e._m(4),r("p",[e._v("The keystore is embedded into the bundle and cannot be replaced.")]),e._v(" "),e._m(5),e._v(" "),e._m(6),e._v(" "),r("DocPreviousVersions"),e._v(" "),r("EditPageLink")],1)},[function(){var e=this.$createElement,t=this._self._c||e;return t("h1",{attrs:{id:"mqtt-broker-moquette"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#mqtt-broker-moquette","aria-hidden":"true"}},[this._v("#")]),this._v(" MQTT Broker Moquette")])},function(){var e=this.$createElement,t=this._self._c||e;return t("h2",{attrs:{id:"service-configuration"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#service-configuration","aria-hidden":"true"}},[this._v("#")]),this._v(" Service Configuration")])},function(){var e=this,t=e.$createElement,r=e._self._c||t;return r("ul",[r("li",[r("strong",[e._v("port")]),e._v(": The port, the embedded broker should run on. Defaults to not set, which means the typical ports 1883 and 8883 (SSL) are used.")]),e._v(" "),r("li",[r("strong",[e._v("username")]),e._v(": The user name that clients need to provide to connect to this broker.")]),e._v(" "),r("li",[r("strong",[e._v("password")]),e._v(": The password that clients need to provide to connect to this broker.")]),e._v(" "),r("li",[r("strong",[e._v("secure")]),e._v(": If set, hosts a secure SSL connection on port 8883 or otherwise a non secure connection on port 1883 (if not overwritten by the port parameter).")]),e._v(" "),r("li",[r("strong",[e._v("persistence_file")]),e._v(': An optional persistence file. Retained messages are stored in this file. Can be empty to not store anything. The default is "userdata/mqttembedded.bin". If it starts with "/" on Linux/macOS or with a drive letter and colon (eg "c:/") it will be treated as an absolute path. Be careful to select a path that you have write access to.')])])},function(){var e=this.$createElement,t=this._self._c||e;return t("h2",{attrs:{id:"tls-connections"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#tls-connections","aria-hidden":"true"}},[this._v("#")]),this._v(" TLS connections")])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("keytool -genkey -v -keystore serverkeystore.keystore -alias main -keyalg RSA -keysize 2048 -validity 100000 -deststoretype pkcs12\n")])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("h2",{attrs:{id:"plans-for-the-future"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#plans-for-the-future","aria-hidden":"true"}},[this._v("#")]),this._v(" Plans for the future")])},function(){var e=this.$createElement,t=this._self._c||e;return t("ul",[t("li",[t("p",[this._v("The moquette MQTT broker supports ACL (access control lists), so allows to restrict read/write access per topic per user or client id. That need to be exposed as configuration values at some point.")])]),this._v(" "),t("li",[t("p",[this._v("Multiple users are supported by the broker software. openHAB does not yet have a user management though.")])]),this._v(" "),t("li",[t("p",[this._v("The keystore need to be replaceable as soon as openHAB gained a way to configure SSL truststores framework wide.")])])])}],!1,null,null,null);t.default=o.exports}}]);